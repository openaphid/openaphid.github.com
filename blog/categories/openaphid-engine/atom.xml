<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenAphid-Engine | OpenAphid-Engine]]></title>
  <link href="http://openaphid.github.com/blog/categories/openaphid-engine/atom.xml" rel="self"/>
  <link href="http://openaphid.github.com/"/>
  <updated>2013-01-27T23:34:21+08:00</updated>
  <id>http://openaphid.github.com/</id>
  <author>
    <name><![CDATA[Aphid Mobile]]></name>
    <email><![CDATA[openaphid@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Part I: How to Choose a JavaScript Engine for iOS and Android Development]]></title>
    <link href="http://openaphid.github.com/blog/2013/01/17/part-i-how-to-choose-a-javascript-engine-for-ios-and-android-apps/"/>
    <updated>2013-01-17T15:30:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2013/01/17/part-i-how-to-choose-a-javascript-engine-for-ios-and-android-apps</id>
    <content type="html"><![CDATA[<blockquote><p>DISCLAIMER: the post contains my personal opinions on the subject. I would appreciate it if you could correct my mistakes.</p></blockquote>

<p>Back to the time when I started <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>, there were already several similar iOS/Android projects. These projects, either commercial or open source, expose their core features by JavaScript language. For instance, <a href="http://www.appcelerator.com/platform/titanium-sdk/" title="Titanium">Titanium</a> and <a href="http://phonegap.com/" title="PhoneGap">PhoneGap</a> allow developers to use JavaScript to build native iOS/Android apps; <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> enables building cross platform games by pure JavaScript. JavaScript language has been chosen as a first-class citizen as it's one of the most popular programming language. It eases the learning curve and easily attracts developers into a new product ecosystem.</p>

<!-- more -->


<h2>How to Support JavaScript on iOS/Android</h2>

<p>There are two main approaches to support JavaScript in an iOS/Android app. One method is to leverage the system browser component, <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebView_Class/Reference/Reference.html" title="UIWebView">UIWebView</a> on iOS and <a href="http://developer.android.com/reference/android/webkit/WebView.html" title="WebView">WebView</a> on Android; the other way is to compile and integrate a full-featured JavaScript engine.</p>

<p>Using the system component is easy to implement but it's inflexible and inefficient. <a href="http://developer.android.com/reference/android/webkit/WebView.html" title="WebView">WebView</a> provides <a href="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29">addJavascriptInterface</a> to inject Java classes into JavaScript context. But it only supports primitive data types which brings restrictions to API design; it's also unstable and crashes on Android simulator 2.3 and some real devices according to <a href="http://code.google.com/p/android/issues/detail?id=12987">issue #12987</a>. Things are worse on iOS, <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebView_Class/Reference/Reference.html" title="UIWebView">UIWebView</a> doesn't have public APIs to support direct interaction from JavaScript to Objective-C (You have to use private APIs to achieve the same functionality of <a href="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29">addJavascriptInterface</a>).</p>

<p><a href="http://phonegap.com/" title="PhoneGap">PhoneGap</a> is the most famous project that is built upon <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebView_Class/Reference/Reference.html" title="UIWebView">UIWebView</a> and <a href="http://developer.android.com/reference/android/webkit/WebView.html" title="WebView">WebView</a>. Developers are forced to use callbacks to retrieve return values from its JavaScript APIs, which is complex and inefficient especially for games.</p>

<p>Some earlier versions of <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> also relied on <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebView_Class/Reference/Reference.html" title="UIWebView">UIWebView</a> in order to support iOS. This mechanism has been replaced because of the awful performance.</p>

<p>In order to get better performance, flexibility and compatibility, it becomes popular by embedding a full featured JavaScript engine in native apps.</p>

<h2>Choices of JavaScript Engines</h2>

<p>As far as I know, four JavaScript engines could be built and ran on iOS or Android: <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a>, <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a>, <a href="http://code.google.com/p/v8/" title="V8">V8</a> and <a href="https://developer.mozilla.org/en-US/docs/Rhino" title="Rhino">Rhino</a>. The table below lists their compatibilities on iOS and Android.</p>

<table class="aphid-table">
    <tr>
        <th></th>
        <th>iOS</th>
        <th>Android</th>
    </tr>
    <tr>
        <td class="aphid-table-main-col">JavaScriptCore</td> <td>Interpreter only</td> <td>Interpreter and JIT</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">SpiderMonkey</td> <td>Interpreter only</td> <td>Interpreter and JIT</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">V8</td> <td>JIT only for jailbroken devices</td> <td>JIT</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">Rhino</td> <td>Unsupported</td> <td>Interpreter</td> 
    </tr>
</table>


<p>When I was searching for the right JavaScript engine for <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>, my evaluation focused on the following metrics:</p>

<ul>
<li><p>Compatibility. The engine should support both iOS and Android, and work on both simulators and devices, which requires it support both ARM and x86.</p></li>
<li><p>Stability. It should stably work on both platforms and supported CPU architectures.</p></li>
<li><p>Extensibility. Extending the engine to add native features should be easy. For example, <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> required a bridge layer to access OpenGL ES from JavaScript.</p></li>
<li><p>Performance. It's boiled down to two primary factors: fast JavaScript evaluation, and efficient binding mechanism with low overhead. <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> may trigger hundreds of OpenGL ES calls from JavaScript to render a single frame. The rendering would be slow if the overhead is much more significant than normal JavaScript routines.</p></li>
<li><p>Small footprint. The memory footprint and binary size of the executable file should be small.</p></li>
</ul>


<p><a href="https://developer.mozilla.org/en-US/docs/Rhino" title="Rhino">Rhino</a> and <a href="http://code.google.com/p/v8/" title="V8">V8</a> were out first since they don't support iOS. I really wanted to build <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> with <a href="http://code.google.com/p/v8/" title="V8">V8</a>, which showed great performance and elegant code structure during my preliminary experiment on Android. But I got disappointed due to the fact that <a href="http://code.google.com/p/v8/" title="V8">V8</a> only employed a JIT mode while iOS doesn't allow JIT unless on a jailbroken device. Please refer to <a href="http://code.google.com/p/v8/issues/detail?id=1312">issue #1312</a> if you need more technical details.</p>

<p>I debated a lot between <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a> and <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a>. After successfully built them on iOS and Android, I applied benchmarks and experiments to find the better one.</p>

<p><a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> is available under a more friendly license, but it lost in nearly all of my measurements compared to <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a>. It generated larger binary file size (about 1.3MB larger for ARMv7); JavaScript evaluation was slower and the performance overhead of bridging JavaScript and C++ was also more significant. One more reason that pushed me away was that my build of <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> randomly crashed on iOS simulator.</p>

<p>The performance of a JavaScript engine can be affected by many factors, like the version of build toolchains, the version of engines, and the OS types etc. The chart below lists the running times of several micro-benchmarks with different builds of engines on an <a href="http://en.wikipedia.org/wiki/IPod_Touch#Specifications">iPod Touch 4</a>. Please check out the <a href="https://docs.google.com/spreadsheet/ccc?key=0AmitMpjPL_UEdGVVdmlwWDBTa0lEbnlQWmw4dlNmTGc">Google Doc</a> if you're interested at the precise running times.</p>

<p><img src="/images/js-engine-benchmark-ipod-touch4.png" title="Benchmark Results of JavaScriptCore and SpiderMonkeys on iPod Touch 4" alt="benchmark" /></p>

<blockquote><ul>
<li><p><a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a> is the clear winner by a large margin.</p></li>
<li><p>I failed to find my build of <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a>, so I leveraged three other custom builds from <a href="http://cocos2d-iphone.googlecode.com/files/cocos2d-iphone-2.1-beta4.tar.gz">Cocos2d-iPhone-2.1-beta4</a>, <a href="http://cocos2d-x.googlecode.com/files/cocos2d-2.1beta3-x-2.1.0.zip">Cocos2d-x-2.1-beta3</a> and <a href="https://github.com/couchbaselabs/iMonkey">iMonkey</a>.</p></li>
<li><p>All test apps were built with LLVM 4.1 in release mode; all engines ran in interpreter mode restricted by iOS.</p></li>
<li><p>Explanations of some benchmarks:</p>

<ul>
<li><p><code>1m-js_loop</code> runs an empty loop for one million times.</p></li>
<li><p><code>1m-native_function</code> invokes an injected native function for 1M times while the native function simply returns undefined.</p></li>
<li><p><code>1m-js_function</code> is similar to the one above except the function is written in JavaScript.</p></li>
<li><p><code>fib(30)</code> calculates Fibonacci(30) in a recursive manner.</p></li>
<li><p><code>sudoku-5</code> solves five Sudoku problems with the algorithm from <a href="https://github.com/attractivechaos/plb/blob/master/sudoku/sudoku_v2.js">this project</a>.</p></li>
</ul>
</li>
<li><p><code>1m-native_function</code> for <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a> was implemented by its portable <a href="http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/API">C APIs</a>, which is not the most efficient way to inject native functions.</p></li>
<li><p><a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> is fast on desktop with its advanced method tracing JIT. But it's a whole different story on iOS devices.</p></li>
<li><p>The build from <a href="https://github.com/couchbaselabs/iMonkey">iMonkey</a> was faster than other <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> builds in most benchmarks.</p></li>
<li><p>It's definitely possible to get better performance from <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> on iOS. <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> 1.10 for iOS managed to embed a custom build, which outperformed other <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> variants.</p></li>
</ul>
</blockquote>

<h2>Adventure with JavaScriptCore</h2>

<p>My study proceeded further after I settled down with <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a>:</p>

<ol>
<li><p>The running time of <code>1m-native_function</code> was over six times longer than <code>1m-js_function</code> and <code>1m-Math.abs(0)</code> on <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a>. I also observed the similar performance issue on accessing properties of injected native objects.</p></li>
<li><p>The <a href="http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/API">C APIs</a> had a clean design but was lack of flexible memory management APIs. It seems difficult to resolve issues caused by <a href="http://stackoverflow.com/questions/10092619/precise-explanation-of-javascript-dom-circular-reference-issue">circular references</a> without deeper cooperation with the internal garbage collector.</p></li>
<li><p>There were many release versions of <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a> available. The best one should be fast and compact for <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p></li>
</ol>


<p>I abandoned the original plan of using the <a href="http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/API">C APIs</a> in order to solve problem 1 and 2. The version of JSC from iOS 4.3.3 was used, as it's faster than the version from iOS 5 in interpreter mode with a smaller binary executable file.</p>

<h2>Engines Used in Other Products</h2>

<p>During the development of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>, I always kept my eyes on other products. The table below summarizes the JavaScript engines they are using underneath.</p>

<table class="aphid-table">
    <tr>
        <th></th>
        <th>iOS</th>
        <th>Android</th>
    </tr>
    <tr>
        <td class="aphid-table-main-col">ngCore 1.6 and above</td> <td>UIWebView</td> <td>V8</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">ngCore 1.7 and later</td> <td>SpiderMonkey</td> <td>V8</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">Titanium</td> <td>JavaScriptCore</td> <td>V8 or Rhino</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">PhoneGap</td> <td>UIWebView</td> <td>WebView</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">Cocos2D-x JavaScript</td> <td>SpiderMonkey</td> <td>SpiderMonkey</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">CocoonJS</td> <td>JavaScriptCore</td> <td>JavaScriptCore</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">Ejecta</td> <td>JavaScriptCore</td> <td>Unsupported</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">directCanvas</td> <td>JavaScriptCore</td> <td>No clue</td> 
    </tr>
</table>


<h2>Next Story in Series</h2>

<p>I will post my opinions on comparing <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> to <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine v0.2.1f Release and Discontinuation Announcement]]></title>
    <link href="http://openaphid.github.com/blog/2013/01/14/openaphid-engine-v0-dot-2-1f-and-discontinuation-announcement/"/>
    <updated>2013-01-14T14:09:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2013/01/14/openaphid-engine-v0-dot-2-1f-and-discontinuation-announcement</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> was born as an exploration project at 2012 first half-year when I quit my day job. Its mission was to figure out the most efficient way to integrate a full JavaScript engine within native iOS/Android games.</p>

<!-- more -->


<p>The development went perfectly well as it even outperformed the commercial solution of <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> from DeNA. I really enjoyed the pleasure brought by tackling technical problems to make the engine support both iOS and Android with high performance. I also gained precious experiences after studying source codes of JavaScriptCore and other great open source projects.</p>

<p>But I failed to find enough time working on it after I started a long travel plan with my family at Aug 2012. After careful consideration, I have decided it's time to sunset the project as I'm going to find a long-term job again. For developers who are also interested at using a JavaScript engine within native apps, I'll write two or three more articles in these days to share some pieces of knowledge collected during the development of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p>

<p>v0.2.1f is the final update of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. The release comes with bug fixes for iOS6 support and performance improvements on Android. The <a href="https://github.com/openaphid/Demos/tree/master/iOS">iOS demo project</a> has been revamped by merging separated demos into one single app. It also illustrates the ability to use <a href="http://coffeescript.org/" title="CoffeeScript">CoffeeScript</a> and <a href="http://www.typescriptlang.org/" title="TypeScript">TypeScript</a> to write games with <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p>

<h2>Release notes of OpenAphid-Engine v0.2.1f</h2>

<ul>
<li><p>(Android) Adds <code>libOpenAphid_JIT.so</code> which includes a JIT enabled JavaScriptCore. It can significantly boost performance for computation intense tasks in JavaScript. For instance, the running time of <code>fibonacci(30)</code> drops to ~140ms from ~780ms on a Nexus 7, while Java on Dalvik VM takes 280ms～350ms to finish the calculation.
<code>javascript
function fibonacci(n) { return n &lt; 2 ? n : (fib(n-1) + fib(n-2)); }
</code></p></li>
<li><p>(Android) Improves rendering performance when a texture has premultiplied alpha values.</p></li>
<li><p>(Android) Fixes a crash when loading JNI libs on Android 4.0+ devices by using toolchains from Android NDK r8c.</p></li>
<li><p>(Android) Demo app has been refined. <a href="https://github.com/openaphid/Demos/tree/master/Android/Demos/apk">APK files</a>.</p></li>
<li><p>(iOS) Orientation on iOS6 now works correctly.</p></li>
<li><p>(iOS) Fixes compilation errors under llvm_4.1.</p></li>
<li><p>(iOS) New all-in-one demo app with ARC enabled. <a href="https://github.com/openaphid/Demos/tree/master/iOS">Project files</a>.</p></li>
<li><p>Samples of using CoffeeScript and TypeScript with <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. Please refer to <a href="https://github.com/openaphid/Demos/blob/master/iOS/OpenAphid-Demos/demo.bundle/coffee_tank.coffee">coffee_tank.coffee</a> and <a href="https://github.com/openaphid/Demos/blob/master/iOS/OpenAphid-Demos/demo.bundle/type_tank.ts">type_tank.ts</a> for more details.</p></li>
</ul>


<p><img src="/images/openaphid-0.2.1f-demos.png" title="Screenshot of New iOS&amp;Android Demo App" alt="screenshot" /></p>

<h2>About Github Repositories</h2>

<p>The main source codes of <a href="https://github.com/openaphid/Runtime">OpenAphid Runtime</a> and <a href="https://github.com/openaphid/AJ">AJ</a> (the modified JavaScript Engine) have been moved into folders named <code>DISCONTINUED</code>.</p>

<h2>Acknowledgments</h2>

<p>I appreciate everyone's support to <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. And special thanks to <a href="http://wannadobre.carbonmade.com/">Wanna Dobre</a>, who kindly designed the wonderful <a href="http://wannad.deviantart.com/gallery/#/d4zzsk5">aphid character</a> for the project and for this blog site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Exposing Java Methods to JavaScript in OpenAphid-Engine]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/10/tutorial-exposing-java-methods-to-javascript-in-openaphid/"/>
    <updated>2012-07-10T14:39:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/10/tutorial-exposing-java-methods-to-javascript-in-openaphid</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid">OpenAphid-Engine</a> for Android v0.1.5 supports exposing Java methods as JavaScript functions, which is helpful for integrating 3rd-party services into games. The binding APIs are similar to its <a href="/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid/">iOS version</a>.</p>

<!-- more -->


<h2>How to Expose Java Methods to JavaScript</h2>

<p>Any public Java methods with supported return type and parameter types, can be exposed as JavaScript functions via <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/Android/src/org/openaphid/bind/AphidJSFunction.java">@AphidJSFunction</a> annotation. An instance with exposed methods can be injected into JavaScript engine as a plain JavaScript object by using <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/Android/src/org/openaphid/gl/AphidRenderer.java">AphidRenderer.setScriptBinding(String name, Object bindingObject, boolean androidOnly)</a>. The injected object will be placed inside <code>aphid.ext</code> or <code>aphid.extandroid</code> namespaces, which is managed by the <code>androidOnly</code> parameter.</p>

<h3>Example of @AphidJSFunction</h3>

<p>```java
public class BindingTest4 {</p>

<pre><code>@AphidJSFunction(name="add", isInUIThread=true)
public int addInMainThread(int i1, int i2) {
    UI.assertInMainThread();
    return i1 + i2;
}
</code></pre>

<p>}</p>

<p>//in onCreate() method of AphidActivity
glSurfaceView.getAphidRenderer().setScriptBinding("test4", new BindingTest4(), false);
```</p>

<p>The snippet above injects an instance of Java class <code>BindingTest4</code> to JavaScript as <code>aphid.ext.test4</code>. Its method <code>addInMainThread()</code> can be accessed via <code>aphid.ext.test4.add()</code> in JavaScript.</p>

<p>The <code>AphidJSFunction</code> annotation supports two optional element-value pairs: <code>name</code> and <code>isInUIThread</code>. <code>name</code> declares a custom function name to JavaScript, the Java method name is used if it's not specified; <code>isInUIThread</code> controls the thread to invoke the Java method, its default value is <code>false</code>. In OpenAphid-Engine for Android, JavaScript runs inside the GL thread. Setting <code>isInUIThread</code> to <code>true</code> makes the Java method run inside the UI thread; the execution of JavaScript is blocked in the GL thread until the Java method returns from the UI thread.</p>

<h3>Type Conversion of Return Value from Java to JavaScript</h3>

<table class="aphid-table">
    <tr>
        <th>Java</th>
        <th>JavaScript</th>
    </tr>
    <tr>
        <td>void</td> <td>undefined</td>
    </tr>
    <tr>
        <td>null</td> <td>null</td>
    </tr>
    <tr>
        <td>boolean</td> <td>bool</td>
    </tr>
    <tr>
        <td>primitive numeric types<br/>(short, char, int, long, float, double)</td> <td>number</td>
    </tr>
    <tr>
        <td>String</td> <td>string</td>
    </tr>
    <tr>
        <td>List</td> <td>array</td>
    </tr>
    <tr>
        <td>Map</td> <td>object</td>
    </tr>
</table>


<h3>Type Conversion of Parameter Value from JavaScript to Java</h3>

<table class="aphid-table">
    <tr>
        <th>JavaScript</th> <th>Java</th>
    </tr>
    <tr>
        <td>undefined</td> <td>null</td>
    </tr>
    <tr>
        <td>null</td> <td>null</td>
    </tr>
    <tr>
        <td>number</td> <td>corresponding primitive numeric type</td>
    </tr>
    <tr>
        <td>string</td> <td>String</td>
    </tr>
    <tr>
        <td>array</td> <td>List</td>
    </tr>
    <tr>
        <td>object except array</td> <td>Map</td>
    </tr>
</table>


<p>Strict type checking is performed during conversion, which throws a JavaScript exception if the types are mismatched.</p>

<h2>Integration with Google Analytics in Boilerplate-Android</h2>

<p>Let's illustrate how to integrate Google Analytics SDK into OpenAphid-Engine for Android. All source codes can be found in the <a href="https://github.com/openaphid/Boilerplate-Android">Boilerplate-Android</a> project.</p>

<p>After adding Google Analytics Android SDK into our project as described in its <a href="https://developers.google.com/analytics/devguides/collection/android/devguide#gettingStarted">official document</a>, we create a Java class <a href="https://github.com/openaphid/Boilerplate-Android/blob/master/src/org/openaphid/thirdparty/ga/GoogleAnalyticsBinding.java">GoogleAnalyticsBinding</a> to bridge JavaScript and Google Analytics SDK. <code>GoogleAnalyticsBinding</code> makes the exposed functions have identical signatures as its iOS version, which enables the same script file(<a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/game.bundle/main.js">main.js</a>) to run on both platforms.</p>

<p>```java
public class GoogleAnalyticsBinding {</p>

<pre><code>//...

@AphidJSFunction(isInUIThread = true, name = "setCustomVariableForScope")
public void setCustomVariable(int index, String name, String value, int scope) {
    GoogleAnalyticsTracker.getInstance()
            .setCustomVar(index, name, value, scope);
}

//...
</code></pre>

<p>}
```</p>

<p>Then we can inject an instance into JavaScript namespace <code>aphid.ext</code> as what we do in iOS version:</p>

<p>```java
glSurfaceView.getAphidRenderer().setScriptBinding(</p>

<pre><code>"gat", 
new GoogleAnalyticsBinding(), 
false   //place inside aphid.ext namespace
);
</code></pre>

<p>```</p>

<p>Now all Google Analytics APIs can be accessed by the same JavaScript functions inside <code>aphid.ext.gat</code> on both iOS and Android.</p>

<p>That's all for this tutorial. We're working on OpenAphid-Engine for Android v0.2, which implements <code>XMLHttpRequest</code> APIs as what we already have in iOS version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine Android v0.1.5 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/09/openaphid-android-v0-dot-1-5-released/"/>
    <updated>2012-07-09T15:02:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/09/openaphid-android-v0-dot-1-5-released</id>
    <content type="html"><![CDATA[<p>We're pleased to release v0.1.5 of OpenAphid-Engine Android.</p>

<p>Highlights of this release includes:</p>

<ul>
<li><p>Support multitouch on Android</p></li>
<li><p>Enhanced single touch handling when multiple fingers are on screen</p></li>
<li><p>Public APIs for Java to JavaScript method binding</p></li>
</ul>


<p><a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a> is also updated with two new demos: <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/assets/demo.bundle/touch_test.js">touch_test.js</a> and <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/assets/demo.bundle/binding_test.js">binding_test.js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine Android v0.1 released]]></title>
    <link href="http://openaphid.github.com/blog/2012/06/27/openaphid-android-v0-dot-1-released/"/>
    <updated>2012-06-27T08:22:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/06/27/openaphid-android-v0-dot-1-released</id>
    <content type="html"><![CDATA[<p>We're excited to release the first version of OpenAphid-Engine which supports Android OS. OpenAphid-Engine is now a cross platform 2D game engine with both iOS and Android support.</p>

<p>Several github repositories have been updated, please check them out for more details:</p>

<!-- more -->


<ul>
<li><p><a href="https://github.com/openaphid/Runtime">https://github.com/openaphid/Runtime</a> is updated with the Android related codes. You can check it out and build it with Android NDK.</p></li>
<li><p><a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a> is also refreshed with the Android project files. You can download the prebuilt APK files to test them on your Android devices: <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/apk/OpenAphid-Android-Demos.apk">OpenAphid-Android-Demos.apk</a></p></li>
</ul>


<h2>Highlights and Limitations of OpenAphid-Engine Android v0.1</h2>

<p>It's the beginning of cross platform support of OpenAphid-Engine. Please consider it as an alpha release. But we'd like to summarize some implementation highlights here:</p>

<ul>
<li><p>The core runtime shares the same code base with the iOS version, which makes new features can be added to both platforms in the future.</p></li>
<li><p>The same JavaScript engine is used on both platforms, which saves us from building a proxy layer to support different engines on different platforms as other solutions do. It also brings better performance which we'll prove later.</p></li>
<li><p>The project is built with the standard Android NDK, no private or undocumented APIs are used.</p></li>
</ul>


<p>This release is lack of several important features comparing to the iOS version. We're planning another release to make it catch up in the near future.</p>

<ul>
<li><p>The native library is built for <code>armeabi-v7a</code> only in this release. <code>armeabi</code> support will be included in the next release.</p></li>
<li><p><code>JavaScript JIT compiler</code> is not enabled. We've done some experiments to enable it on Android OS, which shows promising performance gains for computation intensive tasks and regular expressions. But we decided to disable it now as we didn't spend enough time on evaluating its stability.</p></li>
<li><p><code>JavaScript to Dalvik Java binding</code> is not implemented. <code>XMLHttpRequest</code> and <code>multitouch</code> supports are absent too.</p></li>
<li><p>This version doesn't reload textures automatically when the GL context is destroyed. It simply finishes the activity if GL context is lost. We're working on a better way to handle it.</p></li>
</ul>


<h2 id="benchmark">Performance Benchmark</h2>


<p>The same tank program as introduced in our <a href="/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a> is used to evaluate the performance of OpenAphid-Engine on Android OS. Several other Android 2D game engines are chose as references:</p>

<ul>
<li><p><a href="http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download">cocos2d-x 1.0.1-0.13.0</a>, a C++ port of <code>cocos2d-iphone</code> which supports Android OS.</p></li>
<li><p><a href="http://code.google.com/p/cocos2d-android-1/">cocos2d-android-1</a>, another port of <code>cocos2d-iphone</code> which is implemented in pure Java.</p></li>
<li><p><a href="https://developer.mobage.com/">Ngcore 1.8</a>, a commercial game engine from DeNA which also uses JavaScript and OpenGL ES.</p></li>
</ul>


<p>The benchmark is performed on a <a href="http://developer.motorola.com/products/defyplus-mb526/">Motorola DEFY+ MB526</a> phone, which has a 1GHz processor and a 854x480 sized screen. Its Android OS version is 2.3.6.</p>

<p>We captured the average FPS in 5 seconds for displaying different number of tanks with each engine:</p>

<p><img src="/images/tank_banckmark_android_v0.1.jpg" title="Benchmark Results" alt="performance benchmark" /></p>

<p>OpenAphid-Engine shows great performance again as we can tell from this chart. It's on par with <code>cocos2d-x</code>, and faster than others.</p>

<p><code>cocos2d-android-1</code> suffers from the frequently GC pauses of Dalvik VM as observed from logcat. <code>Ngcore</code> is the slowest engine once again, and its rendering is also buggy in this test. The dirty area in black color should have been cleared in the screenshot below, we've filed a bug report about it to Ngcore:</p>

<p><img src="/images/ngcore_rendering_bug.jpg" title="Demonstrating the rendering bug of Ngcore" alt="Ngcore Rendering Bug" /></p>

<h2>About the Next Release</h2>

<p>The next release will make the Android version have all features as the iOS version does. JavaScript to Dalvik Java binding APIs will be introduced to make integrating 3rd-party services become cross platform too. We'll add new features simultaneously on both iOS and Android versions after that release.</p>

<p>Stay Tuned!</p>
]]></content>
  </entry>
  
</feed>
