<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Release | OpenAphid-Engine]]></title>
  <link href="http://openaphid.github.com/blog/categories/release/atom.xml" rel="self"/>
  <link href="http://openaphid.github.com/"/>
  <updated>2013-01-27T23:31:20+08:00</updated>
  <id>http://openaphid.github.com/</id>
  <author>
    <name><![CDATA[Aphid Mobile]]></name>
    <email><![CDATA[openaphid@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine v0.2.1f Release and Discontinuation Announcement]]></title>
    <link href="http://openaphid.github.com/blog/2013/01/14/openaphid-engine-v0-dot-2-1f-and-discontinuation-announcement/"/>
    <updated>2013-01-14T14:09:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2013/01/14/openaphid-engine-v0-dot-2-1f-and-discontinuation-announcement</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> was born as an exploration project at 2012 first half-year when I quit my day job. Its mission was to figure out the most efficient way to integrate a full JavaScript engine within native iOS/Android games.</p>

<!-- more -->


<p>The development went perfectly well as it even outperformed the commercial solution of <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> from DeNA. I really enjoyed the pleasure brought by tackling technical problems to make the engine support both iOS and Android with high performance. I also gained precious experiences after studying source codes of JavaScriptCore and other great open source projects.</p>

<p>But I failed to find enough time working on it after I started a long travel plan with my family at Aug 2012. After careful consideration, I have decided it's time to sunset the project as I'm going to find a long-term job again. For developers who are also interested at using a JavaScript engine within native apps, I'll write two or three more articles in these days to share some pieces of knowledge collected during the development of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p>

<p>v0.2.1f is the final update of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. The release comes with bug fixes for iOS6 support and performance improvements on Android. The <a href="https://github.com/openaphid/Demos/tree/master/iOS">iOS demo project</a> has been revamped by merging separated demos into one single app. It also illustrates the ability to use <a href="http://coffeescript.org/" title="CoffeeScript">CoffeeScript</a> and <a href="http://www.typescriptlang.org/" title="TypeScript">TypeScript</a> to write games with <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p>

<h2>Release notes of OpenAphid-Engine v0.2.1f</h2>

<ul>
<li><p>(Android) Adds <code>libOpenAphid_JIT.so</code> which includes a JIT enabled JavaScriptCore. It can significantly boost performance for computation intense tasks in JavaScript. For instance, the running time of <code>fibonacci(30)</code> drops to ~140ms from ~780ms on a Nexus 7, while Java on Dalvik VM takes 280msï½ž350ms to finish the calculation.
<code>javascript
function fibonacci(n) { return n &lt; 2 ? n : (fib(n-1) + fib(n-2)); }
</code></p></li>
<li><p>(Android) Improves rendering performance when a texture has premultiplied alpha values.</p></li>
<li><p>(Android) Fixes a crash when loading JNI libs on Android 4.0+ devices by using toolchains from Android NDK r8c.</p></li>
<li><p>(Android) Demo app has been refined. <a href="https://github.com/openaphid/Demos/tree/master/Android/Demos/apk">APK files</a>.</p></li>
<li><p>(iOS) Orientation on iOS6 now works correctly.</p></li>
<li><p>(iOS) Fixes compilation errors under llvm_4.1.</p></li>
<li><p>(iOS) New all-in-one demo app with ARC enabled. <a href="https://github.com/openaphid/Demos/tree/master/iOS">Project files</a>.</p></li>
<li><p>Samples of using CoffeeScript and TypeScript with <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. Please refer to <a href="https://github.com/openaphid/Demos/blob/master/iOS/OpenAphid-Demos/demo.bundle/coffee_tank.coffee">coffee_tank.coffee</a> and <a href="https://github.com/openaphid/Demos/blob/master/iOS/OpenAphid-Demos/demo.bundle/type_tank.ts">type_tank.ts</a> for more details.</p></li>
</ul>


<p><img src="/images/openaphid-0.2.1f-demos.png" title="Screenshot of New iOS&amp;Android Demo App" alt="screenshot" /></p>

<h2>About Github Repositories</h2>

<p>The main source codes of <a href="https://github.com/openaphid/Runtime">OpenAphid Runtime</a> and <a href="https://github.com/openaphid/AJ">AJ</a> (the modified JavaScript Engine) have been moved into folders named <code>DISCONTINUED</code>.</p>

<h2>Acknowledgments</h2>

<p>I appreciate everyone's support to <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. And special thanks to <a href="http://wannadobre.carbonmade.com/">Wanna Dobre</a>, who kindly designed the wonderful <a href="http://wannad.deviantart.com/gallery/#/d4zzsk5">aphid character</a> for the project and for this blog site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FlipView for Android v0.9.6 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/12/12/flipview-for-android-v0-dot-9-6-released/"/>
    <updated>2012-12-12T15:59:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/12/12/flipview-for-android-v0-dot-9-6-released</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid/android-flip">FlipView</a> v0.9.6 is released with various bug fixes and enhancements.</p>

<p><img src="/images/flipview-horizontal-demo.gif" title="Screenshot of Aphid FlipView v0.9.5" alt="screenshot" /></p>

<h2>Release Notes</h2>

<!-- more -->


<p>For a complete change list please checkout our <a href="https://github.com/openaphid/android-flip/issues/milestones?state=closed">issue tracker</a></p>

<h3>v0.9.6, Dec 12th 2012</h3>

<h4>New Features:</h4>

<ul>
<li><p>Adds fling support. (<a href="https://github.com/openaphid/android-flip/pull/10">Pull #10</a>, <a href="https://github.com/openaphid/android-flip/issues/20">Issue #20</a>)</p></li>
<li><p>Adds XML configuration support. (<a href="https://github.com/openaphid/android-flip/issues/13">Issue #13</a>)</p></li>
<li><p>Adds several new demos.</p></li>
</ul>


<h4>Bug Fixes</h4>

<ul>
<li>Fixes several bugs when flipping. (<a href="https://github.com/openaphid/android-flip/issues/17">Issue #17</a>, <a href="https://github.com/openaphid/android-flip/issues/16">Issue #16</a>, <a href="https://github.com/openaphid/android-flip/issues/15">Issue #15</a>, <a href="https://github.com/openaphid/android-flip/issues/14">Issue #14</a>)</li>
</ul>


<h4>Thanks</h4>

<ul>
<li>Special thanks to <a href="https://github.com/iPaulPro">@iPaulPro</a> for his outstanding contributions.</li>
</ul>


<h3>v0.9.5, Nov 9th 2012</h3>

<h4>New Features:</h4>

<ul>
<li><p>Supports flipping horizontally. (<a href="https://github.com/openaphid/android-flip/pull/6">Pull Request 6.</a>. Thanks to <a href="https://github.com/alexmedearis">@axexmedearis</a> for the contribution)</p></li>
<li><p>Supports event listener to get notified when flipping finishes. (<a href="https://github.com/openaphid/android-flip/issues/3">Issue #3</a>)</p></li>
<li><p>Supports content reloading when flipping. (<a href="https://github.com/openaphid/android-flip/issues/3">Issue #4</a>)</p></li>
</ul>


<h4>Bug Fixes</h4>

<ul>
<li>Incorrect rendering of shadow in horizontal mode. (<a href="https://github.com/openaphid/android-flip/issues/7">Issue #7</a>)</li>
</ul>


<h3>v0.9, Sep 21st 2012</h3>

<p>First release</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FlipView for Android v0.9 Beta Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/09/21/aphid-flipview-for-android-v0-dot-9-beta-released/"/>
    <updated>2012-09-21T15:11:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/09/21/aphid-flipview-for-android-v0-dot-9-beta-released</id>
    <content type="html"><![CDATA[<p>I'm happy to announce the first release of <a href="https://github.com/openaphid/android-flip">FlipView</a>, an Android UI component which help add flipping animation in your application. Please download and install the pre-built demo APK file to check out it in action:</p>

<p><a href="https://github.com/openaphid/android-flip/tree/master/FlipView/Demo/APK">https://github.com/openaphid/android-flip/tree/master/FlipView/Demo/APK</a></p>

<p>I'm also glad to use some pictures captured during my trip to build one of the demos:</p>

<p><img src="/images/flipview-demo.gif" title="Screenshot of Aphid FlipView v0.9" alt="screenshot" /></p>

<!-- more -->


<p>The work is derived from the previous demos as described in <a href="/blog/2012/07/27/how-to-handle-touch-events-for-flip-animation/">post 1</a> and <a href="http://openaphid.github.com/blog/2012/05/21/how-to-implement-flipboard-animation-on-android/">post 2</a>. Besides the core animation effect, the v0.9 also fixes issues and adds features requested by several friends:</p>

<ul>
<li><p><code>Adapter</code> is supported for adding multiple pages into a sequence of flipping animation.</p></li>
<li><p>Touch events are correctly dispatched to views in each page, which allows using buttons or other controls in pages.</p></li>
<li><p>Bouncing effect is added for the first and last pages.</p></li>
<li><p>Less flicker when starting and ending the animation.</p></li>
<li><p>Less CPU resource is used when the animation is idle.</p></li>
</ul>


<h2>Core Classes</h2>

<p>The component is released as an <a href="https://github.com/openaphid/android-flip/tree/master/FlipView/FlipLibrary">Android Library Project</a>. The core class is the <a href="https://github.com/openaphid/android-flip/blob/master/FlipView/FlipLibrary/src/com/aphidmobile/flip/FlipViewController.java">FlipViewController</a>.</p>

<p>The general routine of setting up <code>FlipViewController</code> is straightforward:</p>

<ul>
<li>Creates an instance of <code>FlipViewController</code>:</li>
</ul>


<p>```java</p>

<pre><code>FlipViewController flipView = new FlipViewController(context);
</code></pre>

<p>```</p>

<ul>
<li>Provides an adapter as the data source. It's very similar to the setup logic for a <code>ListView</code>:</li>
</ul>


<p>```java</p>

<pre><code>    flipView.setAdapter(new BaseAdapter() {
        @Override
        public int getCount() {
            return count;
        }

        @Override
        public Object getItem(int position) {
            return position;
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            //setup a view by either reusing the convertView or creating a new one.             
            return view;
        }
    });
</code></pre>

<p>```</p>

<ul>
<li><p>Adds the instance of <code>FlipViewController</code> into your view hierarchy.</p></li>
<li><p>Invokes <code>onPause</code> and <code>onResume</code> of <code>FlipViewController</code> correspondingly in your activity's life-cycle methods.</p></li>
</ul>


<p>```java</p>

<pre><code>@Override
protected void onResume() {
    super.onResume();
    flipView.onResume();
}

@Override
protected void onPause() {
    super.onPause();
    flipView.onPause();
}
</code></pre>

<p>```</p>

<p>Please also refer to the demo project for more details:</p>

<p><a href="https://github.com/openaphid/android-flip/tree/master/FlipView/Demo">https://github.com/openaphid/android-flip/tree/master/FlipView/Demo</a></p>

<h2>Important Notes</h2>

<p>There are some facts about the component which you should pay special attention to:</p>

<ul>
<li><p>It's recommended to use only ONE instance per activity. As the animation is implemented in a <code>GLSurfaceView</code>, using multiple instances in one activity may cause serious compatible problems on some Android devices.</p></li>
<li><p>Vertical scroll in sub-views may not work as the touch events are consumed by the animation.</p></li>
<li><p>I don't have enough resources to test its compatibility across all Android OS versions and devices. Please verify it after integrating it in your project.</p></li>
</ul>


<p>Please use <a href="https://github.com/openaphid/android-flip/issues">Github issues</a> to report any problems and request more features. Thanks in advance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine Android v0.1.5 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/09/openaphid-android-v0-dot-1-5-released/"/>
    <updated>2012-07-09T15:02:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/09/openaphid-android-v0-dot-1-5-released</id>
    <content type="html"><![CDATA[<p>We're pleased to release v0.1.5 of OpenAphid-Engine Android.</p>

<p>Highlights of this release includes:</p>

<ul>
<li><p>Support multitouch on Android</p></li>
<li><p>Enhanced single touch handling when multiple fingers are on screen</p></li>
<li><p>Public APIs for Java to JavaScript method binding</p></li>
</ul>


<p><a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a> is also updated with two new demos: <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/assets/demo.bundle/touch_test.js">touch_test.js</a> and <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/assets/demo.bundle/binding_test.js">binding_test.js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine Android v0.1 released]]></title>
    <link href="http://openaphid.github.com/blog/2012/06/27/openaphid-android-v0-dot-1-released/"/>
    <updated>2012-06-27T08:22:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/06/27/openaphid-android-v0-dot-1-released</id>
    <content type="html"><![CDATA[<p>We're excited to release the first version of OpenAphid-Engine which supports Android OS. OpenAphid-Engine is now a cross platform 2D game engine with both iOS and Android support.</p>

<p>Several github repositories have been updated, please check them out for more details:</p>

<!-- more -->


<ul>
<li><p><a href="https://github.com/openaphid/Runtime">https://github.com/openaphid/Runtime</a> is updated with the Android related codes. You can check it out and build it with Android NDK.</p></li>
<li><p><a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a> is also refreshed with the Android project files. You can download the prebuilt APK files to test them on your Android devices: <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/apk/OpenAphid-Android-Demos.apk">OpenAphid-Android-Demos.apk</a></p></li>
</ul>


<h2>Highlights and Limitations of OpenAphid-Engine Android v0.1</h2>

<p>It's the beginning of cross platform support of OpenAphid-Engine. Please consider it as an alpha release. But we'd like to summarize some implementation highlights here:</p>

<ul>
<li><p>The core runtime shares the same code base with the iOS version, which makes new features can be added to both platforms in the future.</p></li>
<li><p>The same JavaScript engine is used on both platforms, which saves us from building a proxy layer to support different engines on different platforms as other solutions do. It also brings better performance which we'll prove later.</p></li>
<li><p>The project is built with the standard Android NDK, no private or undocumented APIs are used.</p></li>
</ul>


<p>This release is lack of several important features comparing to the iOS version. We're planning another release to make it catch up in the near future.</p>

<ul>
<li><p>The native library is built for <code>armeabi-v7a</code> only in this release. <code>armeabi</code> support will be included in the next release.</p></li>
<li><p><code>JavaScript JIT compiler</code> is not enabled. We've done some experiments to enable it on Android OS, which shows promising performance gains for computation intensive tasks and regular expressions. But we decided to disable it now as we didn't spend enough time on evaluating its stability.</p></li>
<li><p><code>JavaScript to Dalvik Java binding</code> is not implemented. <code>XMLHttpRequest</code> and <code>multitouch</code> supports are absent too.</p></li>
<li><p>This version doesn't reload textures automatically when the GL context is destroyed. It simply finishes the activity if GL context is lost. We're working on a better way to handle it.</p></li>
</ul>


<h2 id="benchmark">Performance Benchmark</h2>


<p>The same tank program as introduced in our <a href="/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a> is used to evaluate the performance of OpenAphid-Engine on Android OS. Several other Android 2D game engines are chose as references:</p>

<ul>
<li><p><a href="http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download">cocos2d-x 1.0.1-0.13.0</a>, a C++ port of <code>cocos2d-iphone</code> which supports Android OS.</p></li>
<li><p><a href="http://code.google.com/p/cocos2d-android-1/">cocos2d-android-1</a>, another port of <code>cocos2d-iphone</code> which is implemented in pure Java.</p></li>
<li><p><a href="https://developer.mobage.com/">Ngcore 1.8</a>, a commercial game engine from DeNA which also uses JavaScript and OpenGL ES.</p></li>
</ul>


<p>The benchmark is performed on a <a href="http://developer.motorola.com/products/defyplus-mb526/">Motorola DEFY+ MB526</a> phone, which has a 1GHz processor and a 854x480 sized screen. Its Android OS version is 2.3.6.</p>

<p>We captured the average FPS in 5 seconds for displaying different number of tanks with each engine:</p>

<p><img src="/images/tank_banckmark_android_v0.1.jpg" title="Benchmark Results" alt="performance benchmark" /></p>

<p>OpenAphid-Engine shows great performance again as we can tell from this chart. It's on par with <code>cocos2d-x</code>, and faster than others.</p>

<p><code>cocos2d-android-1</code> suffers from the frequently GC pauses of Dalvik VM as observed from logcat. <code>Ngcore</code> is the slowest engine once again, and its rendering is also buggy in this test. The dirty area in black color should have been cleared in the screenshot below, we've filed a bug report about it to Ngcore:</p>

<p><img src="/images/ngcore_rendering_bug.jpg" title="Demonstrating the rendering bug of Ngcore" alt="Ngcore Rendering Bug" /></p>

<h2>About the Next Release</h2>

<p>The next release will make the Android version have all features as the iOS version does. JavaScript to Dalvik Java binding APIs will be introduced to make integrating 3rd-party services become cross platform too. We'll add new features simultaneously on both iOS and Android versions after that release.</p>

<p>Stay Tuned!</p>
]]></content>
  </entry>
  
</feed>
