<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OpenAphid-Engine]]></title>
  <link href="http://openaphid.github.com/atom.xml" rel="self"/>
  <link href="http://openaphid.github.com/"/>
  <updated>2013-01-27T23:31:20+08:00</updated>
  <id>http://openaphid.github.com/</id>
  <author>
    <name><![CDATA[Aphid Mobile]]></name>
    <email><![CDATA[openaphid@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Part I: How to Choose a JavaScript Engine for iOS and Android Development]]></title>
    <link href="http://openaphid.github.com/blog/2013/01/17/part-i-how-to-choose-a-javascript-engine-for-ios-and-android-apps/"/>
    <updated>2013-01-17T15:30:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2013/01/17/part-i-how-to-choose-a-javascript-engine-for-ios-and-android-apps</id>
    <content type="html"><![CDATA[<blockquote><p>DISCLAIMER: the post contains my personal opinions on the subject. I would appreciate it if you could correct my mistakes.</p></blockquote>

<p>Back to the time when I started <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>, there were already several similar iOS/Android projects. These projects, either commercial or open source, expose their core features by JavaScript language. For instance, <a href="http://www.appcelerator.com/platform/titanium-sdk/" title="Titanium">Titanium</a> and <a href="http://phonegap.com/" title="PhoneGap">PhoneGap</a> allow developers to use JavaScript to build native iOS/Android apps; <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> enables building cross platform games by pure JavaScript. JavaScript language has been chosen as a first-class citizen as it&#8217;s one of the most popular programming language. It eases the learning curve and easily attracts developers into a new product ecosystem.</p>

<!-- more -->


<h2>How to Support JavaScript on iOS/Android</h2>

<p>There are two main approaches to support JavaScript in an iOS/Android app. One method is to leverage the system browser component, <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebView_Class/Reference/Reference.html" title="UIWebView">UIWebView</a> on iOS and <a href="http://developer.android.com/reference/android/webkit/WebView.html" title="WebView">WebView</a> on Android; the other way is to compile and integrate a full-featured JavaScript engine.</p>

<p>Using the system component is easy to implement but it&#8217;s inflexible and inefficient. <a href="http://developer.android.com/reference/android/webkit/WebView.html" title="WebView">WebView</a> provides <a href="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29">addJavascriptInterface</a> to inject Java classes into JavaScript context. But it only supports primitive data types which brings restrictions to API design; it&#8217;s also unstable and crashes on Android simulator 2.3 and some real devices according to <a href="http://code.google.com/p/android/issues/detail?id=12987">issue #12987</a>. Things are worse on iOS, <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebView_Class/Reference/Reference.html" title="UIWebView">UIWebView</a> doesn&#8217;t have public APIs to support direct interaction from JavaScript to Objective-C (You have to use private APIs to achieve the same functionality of <a href="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29">addJavascriptInterface</a>).</p>

<p><a href="http://phonegap.com/" title="PhoneGap">PhoneGap</a> is the most famous project that is built upon <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebView_Class/Reference/Reference.html" title="UIWebView">UIWebView</a> and <a href="http://developer.android.com/reference/android/webkit/WebView.html" title="WebView">WebView</a>. Developers are forced to use callbacks to retrieve return values from its JavaScript APIs, which is complex and inefficient especially for games.</p>

<p>Some earlier versions of <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> also relied on <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIWebView_Class/Reference/Reference.html" title="UIWebView">UIWebView</a> in order to support iOS. This mechanism has been replaced because of the awful performance.</p>

<p>In order to get better performance, flexibility and compatibility, it becomes popular by embedding a full featured JavaScript engine in native apps.</p>

<h2>Choices of JavaScript Engines</h2>

<p>As far as I know, four JavaScript engines could be built and ran on iOS or Android: <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a>, <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a>, <a href="http://code.google.com/p/v8/" title="V8">V8</a> and <a href="https://developer.mozilla.org/en-US/docs/Rhino" title="Rhino">Rhino</a>. The table below lists their compatibilities on iOS and Android.</p>

<table class="aphid-table">
    <tr>
        <th></th>
        <th>iOS</th>
        <th>Android</th>
    </tr>
    <tr>
        <td class="aphid-table-main-col">JavaScriptCore</td> <td>Interpreter only</td> <td>Interpreter and JIT</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">SpiderMonkey</td> <td>Interpreter only</td> <td>Interpreter and JIT</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">V8</td> <td>JIT only for jailbroken devices</td> <td>JIT</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">Rhino</td> <td>Unsupported</td> <td>Interpreter</td> 
    </tr>
</table>


<p>When I was searching for the right JavaScript engine for <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>, my evaluation focused on the following metrics:</p>

<ul>
<li><p>Compatibility. The engine should support both iOS and Android, and work on both simulators and devices, which requires it support both ARM and x86.</p></li>
<li><p>Stability. It should stably work on both platforms and supported CPU architectures.</p></li>
<li><p>Extensibility. Extending the engine to add native features should be easy. For example, <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> required a bridge layer to access OpenGL ES from JavaScript.</p></li>
<li><p>Performance. It&#8217;s boiled down to two primary factors: fast JavaScript evaluation, and efficient binding mechanism with low overhead. <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> may trigger hundreds of OpenGL ES calls from JavaScript to render a single frame. The rendering would be slow if the overhead is much more significant than normal JavaScript routines.</p></li>
<li><p>Small footprint. The memory footprint and binary size of the executable file should be small.</p></li>
</ul>


<p><a href="https://developer.mozilla.org/en-US/docs/Rhino" title="Rhino">Rhino</a> and <a href="http://code.google.com/p/v8/" title="V8">V8</a> were out first since they don&#8217;t support iOS. I really wanted to build <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> with <a href="http://code.google.com/p/v8/" title="V8">V8</a>, which showed great performance and elegant code structure during my preliminary experiment on Android. But I got disappointed due to the fact that <a href="http://code.google.com/p/v8/" title="V8">V8</a> only employed a JIT mode while iOS doesn&#8217;t allow JIT unless on a jailbroken device. Please refer to <a href="http://code.google.com/p/v8/issues/detail?id=1312">issue #1312</a> if you need more technical details.</p>

<p>I debated a lot between <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a> and <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a>. After successfully built them on iOS and Android, I applied benchmarks and experiments to find the better one.</p>

<p><a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> is available under a more friendly license, but it lost in nearly all of my measurements compared to <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a>. It generated larger binary file size (about 1.3MB larger for ARMv7); JavaScript evaluation was slower and the performance overhead of bridging JavaScript and C++ was also more significant. One more reason that pushed me away was that my build of <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> randomly crashed on iOS simulator.</p>

<p>The performance of a JavaScript engine can be affected by many factors, like the version of build toolchains, the version of engines, and the OS types etc. The chart below lists the running times of several micro-benchmarks with different builds of engines on an <a href="http://en.wikipedia.org/wiki/IPod_Touch#Specifications">iPod Touch 4</a>. Please check out the <a href="https://docs.google.com/spreadsheet/ccc?key=0AmitMpjPL_UEdGVVdmlwWDBTa0lEbnlQWmw4dlNmTGc">Google Doc</a> if you&#8217;re interested at the precise running times.</p>

<p><img src="http://openaphid.github.com/images/js-engine-benchmark-ipod-touch4.png" title="Benchmark Results of JavaScriptCore and SpiderMonkeys on iPod Touch 4" alt="benchmark" /></p>

<blockquote><ul>
<li><p><a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a> is the clear winner by a large margin.</p></li>
<li><p>I failed to find my build of <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a>, so I leveraged three other custom builds from <a href="http://cocos2d-iphone.googlecode.com/files/cocos2d-iphone-2.1-beta4.tar.gz">Cocos2d-iPhone-2.1-beta4</a>, <a href="http://cocos2d-x.googlecode.com/files/cocos2d-2.1beta3-x-2.1.0.zip">Cocos2d-x-2.1-beta3</a> and <a href="https://github.com/couchbaselabs/iMonkey">iMonkey</a>.</p></li>
<li><p>All test apps were built with LLVM 4.1 in release mode; all engines ran in interpreter mode restricted by iOS.</p></li>
<li><p>Explanations of some benchmarks:</p>

<ul>
<li><p><code>1m-js_loop</code> runs an empty loop for one million times.</p></li>
<li><p><code>1m-native_function</code> invokes an injected native function for 1M times while the native function simply returns undefined.</p></li>
<li><p><code>1m-js_function</code> is similar to the one above except the function is written in JavaScript.</p></li>
<li><p><code>fib(30)</code> calculates Fibonacci(30) in a recursive manner.</p></li>
<li><p><code>sudoku-5</code> solves five Sudoku problems with the algorithm from <a href="https://github.com/attractivechaos/plb/blob/master/sudoku/sudoku_v2.js">this project</a>.</p></li>
</ul>
</li>
<li><p><code>1m-native_function</code> for <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a> was implemented by its portable <a href="http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/API">C APIs</a>, which is not the most efficient way to inject native functions.</p></li>
<li><p><a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> is fast on desktop with its advanced method tracing JIT. But it&#8217;s a whole different story on iOS devices.</p></li>
<li><p>The build from <a href="https://github.com/couchbaselabs/iMonkey">iMonkey</a> was faster than other <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> builds in most benchmarks.</p></li>
<li><p>It&#8217;s definitely possible to get better performance from <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> on iOS. <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> 1.10 for iOS managed to embed a custom build, which outperformed other <a href="https://developer.mozilla.org/en/docs/SpiderMonkey" title="SpiderMonkey">SpiderMonkey</a> variants.</p></li>
</ul>
</blockquote>

<h2>Adventure with JavaScriptCore</h2>

<p>My study proceeded further after I settled down with <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a>:</p>

<ol>
<li><p>The running time of <code>1m-native_function</code> was over six times longer than <code>1m-js_function</code> and <code>1m-Math.abs(0)</code> on <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a>. I also observed the similar performance issue on accessing properties of injected native objects.</p></li>
<li><p>The <a href="http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/API">C APIs</a> had a clean design but was lack of flexible memory management APIs. It seems difficult to resolve issues caused by <a href="http://stackoverflow.com/questions/10092619/precise-explanation-of-javascript-dom-circular-reference-issue">circular references</a> without deeper cooperation with the internal garbage collector.</p></li>
<li><p>There were many release versions of <a href="http://trac.webkit.org/wiki/JavaScriptCore" title="JavaScriptCore">JavaScriptCore</a> available. The best one should be fast and compact for <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p></li>
</ol>


<p>I abandoned the original plan of using the <a href="http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/API">C APIs</a> in order to solve problem 1 and 2. The version of JSC from iOS 4.3.3 was used, as it&#8217;s faster than the version from iOS 5 in interpreter mode with a smaller binary executable file.</p>

<h2>Engines Used in Other Products</h2>

<p>During the development of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>, I always kept my eyes on other products. The table below summarizes the JavaScript engines they are using underneath.</p>

<table class="aphid-table">
    <tr>
        <th></th>
        <th>iOS</th>
        <th>Android</th>
    </tr>
    <tr>
        <td class="aphid-table-main-col">ngCore 1.6 and above</td> <td>UIWebView</td> <td>V8</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">ngCore 1.7 and later</td> <td>SpiderMonkey</td> <td>V8</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">Titanium</td> <td>JavaScriptCore</td> <td>V8 or Rhino</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">Cocos2D-x JavaScript</td> <td>SpiderMonkey</td> <td>SpiderMonkey</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">CocoonJS</td> <td>JavaScriptCore</td> <td>JavaScriptCore</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">Ejecta</td> <td>JavaScriptCore</td> <td>Unsupported</td> 
    </tr>
    <tr>
        <td class="aphid-table-main-col">directCanvas</td> <td>JavaScriptCore</td> <td>No clue</td> 
    </tr>
</table>


<h2>Next Story in Series</h2>

<p>I will post my opinions on comparing <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> to <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine v0.2.1f Release and Discontinuation Announcement]]></title>
    <link href="http://openaphid.github.com/blog/2013/01/14/openaphid-engine-v0-dot-2-1f-and-discontinuation-announcement/"/>
    <updated>2013-01-14T14:09:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2013/01/14/openaphid-engine-v0-dot-2-1f-and-discontinuation-announcement</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a> was born as an exploration project at 2012 first half-year when I quit my day job. Its mission was to figure out the most efficient way to integrate a full JavaScript engine within native iOS/Android games.</p>

<!-- more -->


<p>The development went perfectly well as it even outperformed the commercial solution of <a href="https://developer.mobage.com/" title="ngCore">ngCore</a> from DeNA. I really enjoyed the pleasure brought by tackling technical problems to make the engine support both iOS and Android with high performance. I also gained precious experiences after studying source codes of JavaScriptCore and other great open source projects.</p>

<p>But I failed to find enough time working on it after I started a long travel plan with my family at Aug 2012. After careful consideration, I have decided it&#8217;s time to sunset the project as I&#8217;m going to find a long-term job again. For developers who are also interested at using a JavaScript engine within native apps, I&#8217;ll write two or three more articles in these days to share some pieces of knowledge collected during the development of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p>

<p>v0.2.1f is the final update of <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. The release comes with bug fixes for iOS6 support and performance improvements on Android. The <a href="https://github.com/openaphid/Demos/tree/master/iOS">iOS demo project</a> has been revamped by merging separated demos into one single app. It also illustrates the ability to use <a href="http://coffeescript.org/" title="CoffeeScript">CoffeeScript</a> and <a href="http://www.typescriptlang.org/" title="TypeScript">TypeScript</a> to write games with <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>.</p>

<h2>Release notes of OpenAphid-Engine v0.2.1f</h2>

<ul>
<li>(Android) Adds <code>libOpenAphid_JIT.so</code> which includes a JIT enabled JavaScriptCore. It can significantly boost performance for computation intense tasks in JavaScript. For instance, the running time of <code>fibonacci(30)</code> drops to ~140ms from ~780ms on a Nexus 7, while Java on Dalvik VM takes 280ms～350ms to finish the calculation.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="nx">n</span> <span class="o">:</span> <span class="p">(</span><span class="nx">fib</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">fib</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">2</span><span class="p">));</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>(Android) Improves rendering performance when a texture has premultiplied alpha values.</p></li>
<li><p>(Android) Fixes a crash when loading JNI libs on Android 4.0+ devices by using toolchains from Android NDK r8c.</p></li>
<li><p>(Android) Demo app has been refined. <a href="https://github.com/openaphid/Demos/tree/master/Android/Demos/apk">APK files</a>.</p></li>
<li><p>(iOS) Orientation on iOS6 now works correctly.</p></li>
<li><p>(iOS) Fixes compilation errors under llvm_4.1.</p></li>
<li><p>(iOS) New all-in-one demo app with ARC enabled. <a href="https://github.com/openaphid/Demos/tree/master/iOS">Project files</a>.</p></li>
<li><p>Samples of using CoffeeScript and TypeScript with <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. Please refer to <a href="https://github.com/openaphid/Demos/blob/master/iOS/OpenAphid-Demos/demo.bundle/coffee_tank.coffee">coffee_tank.coffee</a> and <a href="https://github.com/openaphid/Demos/blob/master/iOS/OpenAphid-Demos/demo.bundle/type_tank.ts">type_tank.ts</a> for more details.</p></li>
</ul>


<p><img src="http://openaphid.github.com/images/openaphid-0.2.1f-demos.png" title="Screenshot of New iOS&amp;Android Demo App" alt="screenshot" /></p>

<h2>About Github Repositories</h2>

<p>The main source codes of <a href="https://github.com/openaphid/Runtime">OpenAphid Runtime</a> and <a href="https://github.com/openaphid/AJ">AJ</a> (the modified JavaScript Engine) have been moved into folders named <code>DISCONTINUED</code>.</p>

<h2>Acknowledgments</h2>

<p>I appreciate everyone&#8217;s support to <a href="https://github.com/openaphid/runtime" title="OpenAphid-Engine">OpenAphid-Engine</a>. And special thanks to <a href="http://wannadobre.carbonmade.com/">Wanna Dobre</a>, who kindly designed the wonderful <a href="http://wannad.deviantart.com/gallery/#/d4zzsk5">aphid character</a> for the project and for this blog site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FlipView for Android v0.9.7 Released]]></title>
    <link href="http://openaphid.github.com/blog/2013/01/02/flipview-for-android-v0-dot-9-7-released/"/>
    <updated>2013-01-02T14:26:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2013/01/02/flipview-for-android-v0-dot-9-7-released</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid/android-flip">FlipView</a> v0.9.7 is released with various performance improvements and bug fixes.</p>

<p>Happy New Year 2013!</p>

<!-- more -->


<h2>Release Notes</h2>

<p>For a complete change list please checkout our <a href="https://github.com/openaphid/android-flip/issues/milestones?state=closed">issue tracker</a></p>

<h3><a href="https://github.com/openaphid/android-flip/issues?milestone=3&amp;state=closed">v0.9.7, Jan 1th 2012</a></h3>

<ul>
<li><p>The core control flow has been rewritten, which fixes several performance and reliability issues about adapter and async content support. (<a href="https://github.com/openaphid/android-flip/issues/36">#36</a>, <a href="https://github.com/openaphid/android-flip/issues/29">#29</a>, <a href="https://github.com/openaphid/android-flip/issues/28">#28</a>, <a href="https://github.com/openaphid/android-flip/issues/8">#8</a>)</p></li>
<li><p>Supports different bitmap format for animation, which can be used to reduce peak memory consumption. (<a href="https://github.com/openaphid/android-flip/issues/34">#34</a>)</p></li>
<li><p>Fixes a severe memory leak issue. (<a href="https://github.com/openaphid/android-flip/issues/33">#33</a>, <a href="https://github.com/openaphid/android-flip/issues/21">#21</a>)</p></li>
<li><p>The demo <a href="https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/src/com/aphidmobile/flip/demo/FlipAsyncContentActivity.java">FlipAsyncContentActivity</a> has been rewritten to illustrate the correct way of handling async content. (<a href="https://github.com/openaphid/android-flip/issues/37">#37</a>)</p></li>
<li><p>A new demo <a href="https://github.com/openaphid/android-flip/blob/master/FlipView/Demo/src/com/aphidmobile/flip/demo/FlipDynamicAdapterActivity.java">FlipDynamicAdapterActivity</a> to demonstrate how to dynamically load more pages. (<a href="https://github.com/openaphid/android-flip/issues/41">#41</a>)</p></li>
<li><p>Thanks to <a href="https://github.com/siegfriedpammer">@siegfriedpammer</a> for his contribution. (<a href="https://github.com/openaphid/android-flip/pull/40">Pull #40</a>)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FlipView for Android v0.9.6 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/12/12/flipview-for-android-v0-dot-9-6-released/"/>
    <updated>2012-12-12T15:59:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/12/12/flipview-for-android-v0-dot-9-6-released</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid/android-flip">FlipView</a> v0.9.6 is released with various bug fixes and enhancements.</p>

<p><img src="http://openaphid.github.com/images/flipview-horizontal-demo.gif" title="Screenshot of Aphid FlipView v0.9.5" alt="screenshot" /></p>

<h2>Release Notes</h2>

<!-- more -->


<p>For a complete change list please checkout our <a href="https://github.com/openaphid/android-flip/issues/milestones?state=closed">issue tracker</a></p>

<h3>v0.9.6, Dec 12th 2012</h3>

<h4>New Features:</h4>

<ul>
<li><p>Adds fling support. (<a href="https://github.com/openaphid/android-flip/pull/10">Pull #10</a>, <a href="https://github.com/openaphid/android-flip/issues/20">Issue #20</a>)</p></li>
<li><p>Adds XML configuration support. (<a href="https://github.com/openaphid/android-flip/issues/13">Issue #13</a>)</p></li>
<li><p>Adds several new demos.</p></li>
</ul>


<h4>Bug Fixes</h4>

<ul>
<li>Fixes several bugs when flipping. (<a href="https://github.com/openaphid/android-flip/issues/17">Issue #17</a>, <a href="https://github.com/openaphid/android-flip/issues/16">Issue #16</a>, <a href="https://github.com/openaphid/android-flip/issues/15">Issue #15</a>, <a href="https://github.com/openaphid/android-flip/issues/14">Issue #14</a>)</li>
</ul>


<h4>Thanks</h4>

<ul>
<li>Special thanks to <a href="https://github.com/iPaulPro">@iPaulPro</a> for his outstanding contributions.</li>
</ul>


<h3>v0.9.5, Nov 9th 2012</h3>

<h4>New Features:</h4>

<ul>
<li><p>Supports flipping horizontally. (<a href="https://github.com/openaphid/android-flip/pull/6">Pull Request 6.</a>. Thanks to <a href="https://github.com/alexmedearis">@axexmedearis</a> for the contribution)</p></li>
<li><p>Supports event listener to get notified when flipping finishes. (<a href="https://github.com/openaphid/android-flip/issues/3">Issue #3</a>)</p></li>
<li><p>Supports content reloading when flipping. (<a href="https://github.com/openaphid/android-flip/issues/3">Issue #4</a>)</p></li>
</ul>


<h4>Bug Fixes</h4>

<ul>
<li>Incorrect rendering of shadow in horizontal mode. (<a href="https://github.com/openaphid/android-flip/issues/7">Issue #7</a>)</li>
</ul>


<h3>v0.9, Sep 21st 2012</h3>

<p>First release</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FlipView for Android v0.9 Beta Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/09/21/aphid-flipview-for-android-v0-dot-9-beta-released/"/>
    <updated>2012-09-21T15:11:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/09/21/aphid-flipview-for-android-v0-dot-9-beta-released</id>
    <content type="html"><![CDATA[<p>I&#8217;m happy to announce the first release of <a href="https://github.com/openaphid/android-flip">FlipView</a>, an Android UI component which help add flipping animation in your application. Please download and install the pre-built demo APK file to check out it in action:</p>

<p><a href="https://github.com/openaphid/android-flip/tree/master/FlipView/Demo/APK">https://github.com/openaphid/android-flip/tree/master/FlipView/Demo/APK</a></p>

<p>I&#8217;m also glad to use some pictures captured during my trip to build one of the demos:</p>

<p><img src="http://openaphid.github.com/images/flipview-demo.gif" title="Screenshot of Aphid FlipView v0.9" alt="screenshot" /></p>

<!-- more -->


<p>The work is derived from the previous demos as described in <a href="http://openaphid.github.com/blog/2012/07/27/how-to-handle-touch-events-for-flip-animation/">post 1</a> and <a href="http://openaphid.github.com/blog/2012/05/21/how-to-implement-flipboard-animation-on-android/">post 2</a>. Besides the core animation effect, the v0.9 also fixes issues and adds features requested by several friends:</p>

<ul>
<li><p><code>Adapter</code> is supported for adding multiple pages into a sequence of flipping animation.</p></li>
<li><p>Touch events are correctly dispatched to views in each page, which allows using buttons or other controls in pages.</p></li>
<li><p>Bouncing effect is added for the first and last pages.</p></li>
<li><p>Less flicker when starting and ending the animation.</p></li>
<li><p>Less CPU resource is used when the animation is idle.</p></li>
</ul>


<h2>Core Classes</h2>

<p>The component is released as an <a href="https://github.com/openaphid/android-flip/tree/master/FlipView/FlipLibrary">Android Library Project</a>. The core class is the <a href="https://github.com/openaphid/android-flip/blob/master/FlipView/FlipLibrary/src/com/aphidmobile/flip/FlipViewController.java">FlipViewController</a>.</p>

<p>The general routine of setting up <code>FlipViewController</code> is straightforward:</p>

<ul>
<li>Creates an instance of <code>FlipViewController</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FlipViewController</span> <span class="n">flipView</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlipViewController</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Provides an adapter as the data source. It&#8217;s very similar to the setup logic for a <code>ListView</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">flipView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="k">new</span> <span class="n">BaseAdapter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getItem</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">position</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getItemId</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">position</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//setup a view by either reusing the convertView or creating a new one.                </span>
</span><span class='line'>          <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Adds the instance of <code>FlipViewController</code> into your view hierarchy.</p></li>
<li><p>Invokes <code>onPause</code> and <code>onResume</code> of <code>FlipViewController</code> correspondingly in your activity&#8217;s life-cycle methods.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>  <span class="n">flipView</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>  <span class="n">flipView</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please also refer to the demo project for more details:</p>

<p><a href="https://github.com/openaphid/android-flip/tree/master/FlipView/Demo">https://github.com/openaphid/android-flip/tree/master/FlipView/Demo</a></p>

<h2>Important Notes</h2>

<p>There are some facts about the component which you should pay special attention to:</p>

<ul>
<li><p>It&#8217;s recommended to use only ONE instance per activity. As the animation is implemented in a <code>GLSurfaceView</code>, using multiple instances in one activity may cause serious compatible problems on some Android devices.</p></li>
<li><p>Vertical scroll in sub-views may not work as the touch events are consumed by the animation.</p></li>
<li><p>I don&#8217;t have enough resources to test its compatibility across all Android OS versions and devices. Please verify it after integrating it in your project.</p></li>
</ul>


<p>Please use <a href="https://github.com/openaphid/android-flip/issues">Github issues</a> to report any problems and request more features. Thanks in advance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Handle Touch Events in Flip Animation]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/27/how-to-handle-touch-events-for-flip-animation/"/>
    <updated>2012-07-27T23:20:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/27/how-to-handle-touch-events-for-flip-animation</id>
    <content type="html"><![CDATA[<blockquote><p><strong> Updates at 2012-12-12: </strong> Please checkout <a href="http://openaphid.github.com/blog/categories/flipview/">FlipView</a> for an improved solution.</p></blockquote>

<p>This short post explains how to handle touch events for the flip animation introduced in our <a href="http://openaphid.github.com/blog/2012/05/21/how-to-implement-flipboard-animation-on-android/">previous post</a>.</p>

<p>The full source codes of the demo application are available at Github:</p>

<p><a href="https://github.com/openaphid/android-flip/tree/master/Legacy/Demo-Touch/">https://github.com/openaphid/android-flip/tree/master/Legacy/Demo-Touch/</a></p>

<p>A pre-built APK file is also present for your Android devices:</p>

<p><a href="https://github.com/openaphid/android-flip/blob/master/Legacy/Demo-Touch/APK/Flip-Touch.apk">https://github.com/openaphid/android-flip/blob/master/Legacy/Demo-Touch/APK/Flip-Touch.apk</a></p>

<blockquote><p><strong> Updated at 2012-08-17: </strong> Fixed the broken links to the project and the APK file.</p></blockquote>

<!-- more -->


<p>The new demo app adds two new features compared to the previous one:</p>

<ul>
<li><p>Supports flipping over between two views. <a href="https://github.com/openaphid/android-flip/blob/master/Demo-Touch/src/com/aphidmobile/flip/FlipCards.java">FlipCards.java</a> takes screenshots of the front and back views, which are used to construct the textures for the translucent <code>GLSurfaceView</code>. The flip animation is rendered by four instances of <a href="https://github.com/openaphid/android-flip/blob/master/Demo-Touch/src/com/aphidmobile/flip/Card.java">Card</a>. Please refer to the <a href="https://github.com/openaphid/android-flip/blob/master/Demo-Touch/src/com/aphidmobile/flip/FlipCards.java">draw(GL10 gl)</a> method for more details.</p></li>
<li><p>Flip angle can be controlled by touch events. Angle is calculated according to the relative movement of touches. The logic can be found in the <a href="https://github.com/openaphid/android-flip/blob/master/Demo-Touch/src/com/aphidmobile/flip/FlipCards.java">handleTouchEvent(MotionEvent event)</a> method.</p></li>
</ul>


<h2>Future Enhancements</h2>

<p>The demo app is just a prove of concept. It can be enhanced to be a component for general scenarios:</p>

<ul>
<li><p>To support a <code>Adapter</code> as its data source to load views dynamically and lazily.</p></li>
<li><p>To implement similar APIs like <code>ListView</code></p></li>
<li><p>To support other fancy effects that can be implemented in OpenGL ES.</p></li>
</ul>


<p>But I&#8217;m sorry that I&#8217;ll be in a long trip with my family. Both <code>android-flip</code> and <code>OpenAphid-Engine</code> will not be updated until I come back. You can still reach me via email if you have any questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Exposing Java Methods to JavaScript in OpenAphid-Engine]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/10/tutorial-exposing-java-methods-to-javascript-in-openaphid/"/>
    <updated>2012-07-10T14:39:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/10/tutorial-exposing-java-methods-to-javascript-in-openaphid</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid">OpenAphid-Engine</a> for Android v0.1.5 supports exposing Java methods as JavaScript functions, which is helpful for integrating 3rd-party services into games. The binding APIs are similar to its <a href="http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid/">iOS version</a>.</p>

<!-- more -->


<h2>How to Expose Java Methods to JavaScript</h2>

<p>Any public Java methods with supported return type and parameter types, can be exposed as JavaScript functions via <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/Android/src/org/openaphid/bind/AphidJSFunction.java">@AphidJSFunction</a> annotation. An instance with exposed methods can be injected into JavaScript engine as a plain JavaScript object by using <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/Android/src/org/openaphid/gl/AphidRenderer.java">AphidRenderer.setScriptBinding(String name, Object bindingObject, boolean androidOnly)</a>. The injected object will be placed inside <code>aphid.ext</code> or <code>aphid.extandroid</code> namespaces, which is managed by the <code>androidOnly</code> parameter.</p>

<h3>Example of @AphidJSFunction</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BindingTest4</span> <span class="o">{</span>   
</span><span class='line'>  <span class="nd">@AphidJSFunction</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;add&quot;</span><span class="o">,</span> <span class="n">isInUIThread</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addInMainThread</span><span class="o">(</span><span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">UI</span><span class="o">.</span><span class="na">assertInMainThread</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i1</span> <span class="o">+</span> <span class="n">i2</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//in onCreate() method of AphidActivity</span>
</span><span class='line'><span class="n">glSurfaceView</span><span class="o">.</span><span class="na">getAphidRenderer</span><span class="o">().</span><span class="na">setScriptBinding</span><span class="o">(</span><span class="s">&quot;test4&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BindingTest4</span><span class="o">(),</span> <span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The snippet above injects an instance of Java class <code>BindingTest4</code> to JavaScript as <code>aphid.ext.test4</code>. Its method <code>addInMainThread()</code> can be accessed via <code>aphid.ext.test4.add()</code> in JavaScript.</p>

<p>The <code>AphidJSFunction</code> annotation supports two optional element-value pairs: <code>name</code> and <code>isInUIThread</code>. <code>name</code> declares a custom function name to JavaScript, the Java method name is used if it&#8217;s not specified; <code>isInUIThread</code> controls the thread to invoke the Java method, its default value is <code>false</code>. In OpenAphid-Engine for Android, JavaScript runs inside the GL thread. Setting <code>isInUIThread</code> to <code>true</code> makes the Java method run inside the UI thread; the execution of JavaScript is blocked in the GL thread until the Java method returns from the UI thread.</p>

<h3>Type Conversion of Return Value from Java to JavaScript</h3>

<table class="aphid-table">
    <tr>
        <th>Java</th>
        <th>JavaScript</th>
    </tr>
    <tr>
        <td>void</td> <td>undefined</td>
    </tr>
    <tr>
        <td>null</td> <td>null</td>
    </tr>
    <tr>
        <td>boolean</td> <td>bool</td>
    </tr>
    <tr>
        <td>primitive numeric types<br/>(short, char, int, long, float, double)</td> <td>number</td>
    </tr>
    <tr>
        <td>String</td> <td>string</td>
    </tr>
    <tr>
        <td>List</td> <td>array</td>
    </tr>
    <tr>
        <td>Map</td> <td>object</td>
    </tr>
</table>


<h3>Type Conversion of Parameter Value from JavaScript to Java</h3>

<table class="aphid-table">
    <tr>
        <th>JavaScript</th> <th>Java</th>
    </tr>
    <tr>
        <td>undefined</td> <td>null</td>
    </tr>
    <tr>
        <td>null</td> <td>null</td>
    </tr>
    <tr>
        <td>number</td> <td>corresponding primitive numeric type</td>
    </tr>
    <tr>
        <td>string</td> <td>String</td>
    </tr>
    <tr>
        <td>array</td> <td>List</td>
    </tr>
    <tr>
        <td>object except array</td> <td>Map</td>
    </tr>
</table>


<p>Strict type checking is performed during conversion, which throws a JavaScript exception if the types are mismatched.</p>

<h2>Integration with Google Analytics in Boilerplate-Android</h2>

<p>Let&#8217;s illustrate how to integrate Google Analytics SDK into OpenAphid-Engine for Android. All source codes can be found in the <a href="https://github.com/openaphid/Boilerplate-Android">Boilerplate-Android</a> project.</p>

<p>After adding Google Analytics Android SDK into our project as described in its <a href="https://developers.google.com/analytics/devguides/collection/android/devguide#gettingStarted">official document</a>, we create a Java class <a href="https://github.com/openaphid/Boilerplate-Android/blob/master/src/org/openaphid/thirdparty/ga/GoogleAnalyticsBinding.java">GoogleAnalyticsBinding</a> to bridge JavaScript and Google Analytics SDK. <code>GoogleAnalyticsBinding</code> makes the exposed functions have identical signatures as its iOS version, which enables the same script file(<a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/game.bundle/main.js">main.js</a>) to run on both platforms.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GoogleAnalyticsBinding</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@AphidJSFunction</span><span class="o">(</span><span class="n">isInUIThread</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;setCustomVariableForScope&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCustomVariable</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">scope</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">GoogleAnalyticsTracker</span><span class="o">.</span><span class="na">getInstance</span><span class="o">()</span>
</span><span class='line'>              <span class="o">.</span><span class="na">setCustomVar</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">scope</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can inject an instance into JavaScript namespace <code>aphid.ext</code> as what we do in iOS version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">glSurfaceView</span><span class="o">.</span><span class="na">getAphidRenderer</span><span class="o">().</span><span class="na">setScriptBinding</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;gat&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="k">new</span> <span class="nf">GoogleAnalyticsBinding</span><span class="o">(),</span>
</span><span class='line'>  <span class="kc">false</span>   <span class="c1">//place inside aphid.ext namespace</span>
</span><span class='line'>  <span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now all Google Analytics APIs can be accessed by the same JavaScript functions inside <code>aphid.ext.gat</code> on both iOS and Android.</p>

<p>That&#8217;s all for this tutorial. We&#8217;re working on OpenAphid-Engine for Android v0.2, which implements <code>XMLHttpRequest</code> APIs as what we already have in iOS version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine Android v0.1.5 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/07/09/openaphid-android-v0-dot-1-5-released/"/>
    <updated>2012-07-09T15:02:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/07/09/openaphid-android-v0-dot-1-5-released</id>
    <content type="html"><![CDATA[<p>We&#8217;re pleased to release v0.1.5 of OpenAphid-Engine Android.</p>

<p>Highlights of this release includes:</p>

<ul>
<li><p>Support multitouch on Android</p></li>
<li><p>Enhanced single touch handling when multiple fingers are on screen</p></li>
<li><p>Public APIs for Java to JavaScript method binding</p></li>
</ul>


<p><a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a> is also updated with two new demos: <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/assets/demo.bundle/touch_test.js">touch_test.js</a> and <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/assets/demo.bundle/binding_test.js">binding_test.js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine Android v0.1 released]]></title>
    <link href="http://openaphid.github.com/blog/2012/06/27/openaphid-android-v0-dot-1-released/"/>
    <updated>2012-06-27T08:22:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/06/27/openaphid-android-v0-dot-1-released</id>
    <content type="html"><![CDATA[<p>We&#8217;re excited to release the first version of OpenAphid-Engine which supports Android OS. OpenAphid-Engine is now a cross platform 2D game engine with both iOS and Android support.</p>

<p>Several github repositories have been updated, please check them out for more details:</p>

<!-- more -->


<ul>
<li><p><a href="https://github.com/openaphid/Runtime">https://github.com/openaphid/Runtime</a> is updated with the Android related codes. You can check it out and build it with Android NDK.</p></li>
<li><p><a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a> is also refreshed with the Android project files. You can download the prebuilt APK files to test them on your Android devices: <a href="https://github.com/openaphid/Demos/blob/master/Android/Demos/apk/OpenAphid-Android-Demos.apk">OpenAphid-Android-Demos.apk</a></p></li>
</ul>


<h2>Highlights and Limitations of OpenAphid-Engine Android v0.1</h2>

<p>It&#8217;s the beginning of cross platform support of OpenAphid-Engine. Please consider it as an alpha release. But we&#8217;d like to summarize some implementation highlights here:</p>

<ul>
<li><p>The core runtime shares the same code base with the iOS version, which makes new features can be added to both platforms in the future.</p></li>
<li><p>The same JavaScript engine is used on both platforms, which saves us from building a proxy layer to support different engines on different platforms as other solutions do. It also brings better performance which we&#8217;ll prove later.</p></li>
<li><p>The project is built with the standard Android NDK, no private or undocumented APIs are used.</p></li>
</ul>


<p>This release is lack of several important features comparing to the iOS version. We&#8217;re planning another release to make it catch up in the near future.</p>

<ul>
<li><p>The native library is built for <code>armeabi-v7a</code> only in this release. <code>armeabi</code> support will be included in the next release.</p></li>
<li><p><code>JavaScript JIT compiler</code> is not enabled. We&#8217;ve done some experiments to enable it on Android OS, which shows promising performance gains for computation intensive tasks and regular expressions. But we decided to disable it now as we didn&#8217;t spend enough time on evaluating its stability.</p></li>
<li><p><code>JavaScript to Dalvik Java binding</code> is not implemented. <code>XMLHttpRequest</code> and <code>multitouch</code> supports are absent too.</p></li>
<li><p>This version doesn&#8217;t reload textures automatically when the GL context is destroyed. It simply finishes the activity if GL context is lost. We&#8217;re working on a better way to handle it.</p></li>
</ul>


<h2 id="benchmark">Performance Benchmark</h2>


<p>The same tank program as introduced in our <a href="http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a> is used to evaluate the performance of OpenAphid-Engine on Android OS. Several other Android 2D game engines are chose as references:</p>

<ul>
<li><p><a href="http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Download">cocos2d-x 1.0.1-0.13.0</a>, a C++ port of <code>cocos2d-iphone</code> which supports Android OS.</p></li>
<li><p><a href="http://code.google.com/p/cocos2d-android-1/">cocos2d-android-1</a>, another port of <code>cocos2d-iphone</code> which is implemented in pure Java.</p></li>
<li><p><a href="https://developer.mobage.com/">Ngcore 1.8</a>, a commercial game engine from DeNA which also uses JavaScript and OpenGL ES.</p></li>
</ul>


<p>The benchmark is performed on a <a href="http://developer.motorola.com/products/defyplus-mb526/">Motorola DEFY+ MB526</a> phone, which has a 1GHz processor and a 854x480 sized screen. Its Android OS version is 2.3.6.</p>

<p>We captured the average FPS in 5 seconds for displaying different number of tanks with each engine:</p>

<p><img src="http://openaphid.github.com/images/tank_banckmark_android_v0.1.jpg" title="Benchmark Results" alt="performance benchmark" /></p>

<p>OpenAphid-Engine shows great performance again as we can tell from this chart. It&#8217;s on par with <code>cocos2d-x</code>, and faster than others.</p>

<p><code>cocos2d-android-1</code> suffers from the frequently GC pauses of Dalvik VM as observed from logcat. <code>Ngcore</code> is the slowest engine once again, and its rendering is also buggy in this test. The dirty area in black color should have been cleared in the screenshot below, we&#8217;ve filed a bug report about it to Ngcore:</p>

<p><img src="http://openaphid.github.com/images/ngcore_rendering_bug.jpg" title="Demonstrating the rendering bug of Ngcore" alt="Ngcore Rendering Bug" /></p>

<h2>About the Next Release</h2>

<p>The next release will make the Android version have all features as the iOS version does. JavaScript to Dalvik Java binding APIs will be introduced to make integrating 3rd-party services become cross platform too. We&#8217;ll add new features simultaneously on both iOS and Android versions after that release.</p>

<p>Stay Tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Implement Flipboard Animation on Android]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/21/how-to-implement-flipboard-animation-on-android/"/>
    <updated>2012-05-21T22:14:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/21/how-to-implement-flipboard-animation-on-android</id>
    <content type="html"><![CDATA[<blockquote><p><strong> Updates at 2012-12-12: </strong> Please check out <a href="http://openaphid.github.com/blog/categories/flipview/">FlipView</a> for an improved solution.</p></blockquote>

<p>The demo in this post was born when we&#8217;re working on the Android port of <a href="https://github.com/openaphid">OpenAphid-Engine</a>. One of our engineers is a huge fan of <a href="http://www.flipboard.com">Flipboard iOS</a>. He decided to implement its page flip animation on Android.</p>

<p>If you don&#8217;t know about the effect, please install the APK file of our demo app to see how it looks:</p>

<!-- more -->


<p><a href="http://openaphid.github.com/images/AndroidFlip.apk">http://openaphid.github.com/images/AndroidFlip.apk</a></p>

<p>The full source codes of the demo application is also available at Github:</p>

<p><a href="https://github.com/openaphid/android-flip">https://github.com/openaphid/android-flip</a></p>

<h2>Overview</h2>

<p>The Flipboard animation is easy to achieve on iOS by using Core Animation. Things get a bit difficult on Android:</p>

<ul>
<li><p>The view animation framework on Android is not flexible and efficient for versions prior to 3.0;</p></li>
<li><p>The Android layout system makes it even harder for advanced animation;</p></li>
</ul>


<p>In order to apply flip effect for views with arbitrary structures and make the animation run smoothly, several tricks are used in our approach. OpenGL ES is used to render the animation for efficiency; a special view container is implemented to grab content of a view to OpenGL ES. Let&#8217;s go through them one by one.</p>

<h2>View Hierarchy</h2>

<p>Our demo app displays two LinearLayouts at the same time: <a href="https://github.com/openaphid/android-flip/blob/master/res/layout/first_page.xml">R.layout.first_page</a> and <a href="https://github.com/openaphid/android-flip/blob/master/res/layout/second_page.xml">R.layout.second_page</a>.</p>

<p><img src="http://openaphid.github.com/images/flip-first-page.jpg" title="'first_page'" >
<img src="http://openaphid.github.com/images/flip-second-page.jpg" title="'second_page'" ></p>

<p>The first page is displayed over the second page. We took a screenshot when the first page flipped by 75 degrees:</p>

<p><img src="http://openaphid.github.com/images/flip-75-degree.jpg"></p>

<p>When the first page is flipping, its top half stays still while the bottom half flips around the horizontal center axis of the page; part of the second page is visible during the animation.</p>

<h2>Custom ViewGroup</h2>

<p>A custom <code>ViewGroup</code>, <a href="https://github.com/openaphid/android-flip/blob/master/src/com/aphidmobile/flip/FlipViewGroup.java">FlipViewGroup</a>, is used to manage the visibility of the two pages and serve content to OpenGL ES. Besides using a <code>LinkedList</code> to manage normal sub-views, it also contains a <code>GLSurfaceView</code> to play animation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span> <span class="n">flipViews</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;();</span>
</span><span class='line'><span class="kd">private</span> <span class="n">GLSurfaceView</span> <span class="n">surfaceView</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The GLSurfaceView is added as a sub-view automatically. The <code>onLayout</code> method of <code>FlipViewGroup</code> is overridden to monitor the changes of view dimension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">for</span> <span class="o">(</span><span class="n">View</span> <span class="n">child</span> <span class="o">:</span> <span class="n">flipViews</span><span class="o">)</span>
</span><span class='line'>      <span class="n">child</span><span class="o">.</span><span class="na">layout</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="o">,</span> <span class="n">b</span> <span class="o">-</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">changed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">b</span> <span class="o">-</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>      <span class="n">surfaceView</span><span class="o">.</span><span class="na">layout</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">w</span><span class="o">,</span> <span class="n">h</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">width</span> <span class="o">!=</span> <span class="n">w</span> <span class="o">||</span> <span class="n">height</span> <span class="o">!=</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">width</span> <span class="o">=</span> <span class="n">w</span><span class="o">;</span>
</span><span class='line'>          <span class="n">height</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">flipping</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">flipViews</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">flipViews</span><span class="o">.</span><span class="na">getLast</span><span class="o">();</span>
</span><span class='line'>              <span class="n">renderer</span><span class="o">.</span><span class="na">updateTexture</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>              <span class="n">view</span><span class="o">.</span><span class="na">setVisibility</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">INVISIBLE</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As in line 14 to line 16, when a change of view dimension is detected and flipping is on, the OpenGL render updates the texture by taking a screenshot of the top view; then the top view is hidden while the <code>GLSurfaceView</code> will display its content with flip animation.</p>

<h2>GrabIt</h2>

<p><a href="https://github.com/openaphid/android-flip/blob/master/src/com/aphidmobile/flip/GrabIt.java">GrabIt</a> is a small utility to convert the content of a view to a <code>Bitmap</code>. The result bitmap will be used to construct the texture for <code>GLSurfaceView</code>.</p>

<h2>Setup of GLSurfaceView and Renderer</h2>

<p>The <code>GLSurfaceView</code> instance is setup to use the following configurations:</p>

<ul>
<li>A RGBA_8888 surface with 16-bit depth buffer;</li>
<li>It&#8217;s displayed on the top of the window;</li>
<li>A custom renderer: <code>FlipRenderer</code>;</li>
<li>The desired PixelFormat of the surface should support translucency;</li>
<li>The rendering mode is set to make the renderer be called repeatedly;</li>
</ul>


<p>The <a href="https://github.com/openaphid/android-flip/blob/master/src/com/aphidmobile/flip/FlipRenderer.java">FlipRenderer</a> maps the OpenGL pixels to 2D screen pixels one-by-one which is similar to what OpenAphid-Engine does for 2D games. And the origin of the coordinate system is bottom left.</p>

<p>The actual drawing process is managed in the instance of <code>FlipCards</code>.</p>

<h2>FlipCards</h2>

<p><a href="https://github.com/openaphid/android-flip/blob/master/src/com/aphidmobile/flip/FlipCards.java">FlipCards</a> manages the content and structure of flip animation. It accepts a bitmap, which should be the screenshot of the first page, to build the texture for rendering. The texture is binded to two instances of <code>Card</code> object. <code>topCard</code> renders the top half, which stays still; <code>bottomCard</code> draws the flipping effect of the bottom half.</p>

<h2>Card</h2>

<p><a href="https://github.com/openaphid/android-flip/blob/master/src/com/aphidmobile/flip/Card.java">Card</a> represents a quadrilateral in OpenGL space. Its <code>angle</code> property controls the flip angle, which is accomplished by the following OpenGL codes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">angle</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glTranslatef</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="mi">0</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glRotatef</span><span class="o">(-</span><span class="n">angle</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glTranslatef</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="n">cardVertices</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="mi">0</span><span class="n">f</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <code>Card</code> instance also takes a texture to bind to it. Let&#8217;s take the <code>topCard</code> of <code>FlipCards</code> for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>     <span class="n">topCard</span><span class="o">.</span><span class="na">setTexture</span><span class="o">(</span><span class="n">texture</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">topCard</span><span class="o">.</span><span class="na">setCardVertices</span><span class="o">(</span><span class="k">new</span> <span class="kt">float</span><span class="o">[]{</span>
</span><span class='line'>          <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getHeight</span><span class="o">(),</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span>                     <span class="c1">//top left</span>
</span><span class='line'>          <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">/</span> <span class="mf">2.0f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span>              <span class="c1">//bottom left</span>
</span><span class='line'>          <span class="n">bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="n">f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="c1">//bottom right</span>
</span><span class='line'>          <span class="n">bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getHeight</span><span class="o">(),</span> <span class="mi">0</span><span class="n">f</span>       <span class="c1">//top right</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">topCard</span><span class="o">.</span><span class="na">setTextureCoordinates</span><span class="o">(</span><span class="k">new</span> <span class="kt">float</span><span class="o">[]{</span>
</span><span class='line'>          <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span>
</span><span class='line'>          <span class="mi">0</span><span class="o">,</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="n">f</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">texture</span><span class="o">.</span><span class="na">getHeight</span><span class="o">(),</span>
</span><span class='line'>          <span class="n">bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">texture</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="n">f</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">texture</span><span class="o">.</span><span class="na">getHeight</span><span class="o">(),</span>
</span><span class='line'>          <span class="n">bitmap</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="n">texture</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="mi">0</span><span class="n">f</span>
</span><span class='line'>      <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The vertices of <code>topCard</code> are set to make the card at the top half of the application screen. And its texture coordinates are set to render the top half of the first page.</p>

<p>In order to make the flip effect more realistic, a gray rectangle is rendered to cover the appealed area of the second page, which looks like a shadow of the flipping card casting on the second page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">angle</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glDisable</span><span class="o">(</span><span class="n">GL_LIGHTING</span><span class="o">);</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glDisable</span><span class="o">(</span><span class="n">GL_DEPTH_TEST</span><span class="o">);</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">w</span> <span class="o">=</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">-</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">//shadow width</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">h</span> <span class="o">=</span> <span class="o">(</span><span class="n">cardVertices</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">4</span><span class="o">])</span> <span class="o">*</span> <span class="o">(</span><span class="mi">1</span><span class="n">f</span> <span class="o">-</span> <span class="n">FloatMath</span><span class="o">.</span><span class="na">cos</span><span class="o">(</span><span class="n">d2r</span><span class="o">(</span><span class="n">angle</span><span class="o">)));</span> <span class="c1">//shadow height</span>
</span><span class='line'>      <span class="kt">float</span> <span class="n">z</span> <span class="o">=</span> <span class="o">(</span><span class="n">cardVertices</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">4</span><span class="o">])</span> <span class="o">*</span> <span class="n">FloatMath</span><span class="o">.</span><span class="na">sin</span><span class="o">(</span><span class="n">d2r</span><span class="o">(</span><span class="n">angle</span><span class="o">));</span>    <span class="c1">//z index of the top side of shadow</span>
</span><span class='line'>      <span class="kt">float</span><span class="o">[]</span> <span class="n">shadowVertices</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="o">[]{</span>
</span><span class='line'>          <span class="n">cardVertices</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">h</span> <span class="o">+</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">4</span><span class="o">],</span> <span class="n">z</span><span class="o">,</span>
</span><span class='line'>          <span class="n">cardVertices</span><span class="o">[</span><span class="mi">3</span><span class="o">],</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">4</span><span class="o">],</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span>
</span><span class='line'>          <span class="n">w</span><span class="o">,</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">7</span><span class="o">],</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span>
</span><span class='line'>          <span class="n">w</span><span class="o">,</span> <span class="n">h</span> <span class="o">+</span> <span class="n">cardVertices</span><span class="o">[</span><span class="mi">4</span><span class="o">],</span> <span class="n">z</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="n">f</span> <span class="o">*</span> <span class="o">(</span><span class="mi">90</span><span class="n">f</span> <span class="o">-</span> <span class="n">angle</span><span class="o">)</span> <span class="o">/</span> <span class="mi">90</span><span class="n">f</span><span class="o">;</span> <span class="c1">//shadow alpha</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glColor4f</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="mf">0.0f</span><span class="o">,</span> <span class="mi">0</span><span class="n">f</span><span class="o">,</span> <span class="n">alpha</span><span class="o">);</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glVertexPointer</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">GL_FLOAT</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">toFloatBuffer</span><span class="o">(</span><span class="n">shadowVertices</span><span class="o">));</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glDrawElements</span><span class="o">(</span><span class="n">GL_TRIANGLES</span><span class="o">,</span> <span class="n">indices</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">GL_UNSIGNED_SHORT</span><span class="o">,</span> <span class="n">indexBuffer</span><span class="o">);</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glEnable</span><span class="o">(</span><span class="n">GL_DEPTH_TEST</span><span class="o">);</span>
</span><span class='line'>      <span class="n">gl</span><span class="o">.</span><span class="na">glEnable</span><span class="o">(</span><span class="n">GL_LIGHTING</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The snippets above should cover the core concepts of our approach. You can fork the project to support more effects as we can see in Flipboard iPhone, like page flip following touch moves, flip over of a page, and book flip effect etc.</p>

<p>BTW, we&#8217;re tackling some technical problems of OpenAphid-Engine Android version. Will keep you posted if a stable version is ready.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Calling Objective-C Methods from JavaScript in OpenAphid-Engine]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid/"/>
    <updated>2012-05-16T10:06:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/16/tutorial-exposing-objective-c-methods-to-javascript-in-openaphid</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openaphid">OpenAphid-Engine</a> 0.2 was shipped with a new binding system which can bridge JavaScript functions to Objective-C methods on demand. It&#8217;s useful for games to integrate analytics services, monetization solutions, and social services, etc. In this tutorial, we&#8217;ll go through the binding system by demonstrating how to integrate <a href="https://developers.google.com/analytics/devguides/collection/ios/">Google Analytics iOS SDK</a> into OpenAphid-Engine.</p>

<!-- more -->


<h2>How to Access Objective-C Methods in JavaScript</h2>

<p>The <code>OABindingProtocol</code> protocol, defined in <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/OABindingProtocol.h">OABindingProtocol.h</a>, defines a method <code>bindSelectors:</code> that you can implement in your Objective-C classes to expose their methods to the JavaScript environment. To make a method valid for export, its return type and all argument types must be the supported types below:</p>

<h3>Type Conversion of Return Value from Objective-C to JavaScript</h3>

<table class="aphid-table">
    <tr>
        <th>Objective-C</th>
        <th>JavaScript</th>
    </tr>
    <tr>
        <td>void</td> <td>undefined</td>
    </tr>
    <tr>
        <td>nil or NSNull</td> <td>null</td>
    </tr>
    <tr>
        <td>primitive numeric types<br/>(int, float, double, etc)</td> <td>number</td>
    </tr>
    <tr>
        <td>NSNumber</td> <td>number</td>
    </tr>
    <tr>
        <td>NSString</td> <td>string</td>
    </tr>
    <tr>
        <td>NSArray</td> <td>array</td>
    </tr>
    <tr>
        <td>NSDictionary</td> <td>object</td>
    </tr>
</table>


<h3>Type Conversion of Argument Value from JavaScript to Objective-C</h3>

<table class="aphid-table">
    <tr>
        <th>JavaScript</th> <th>Objective-C</th>
    </tr>
    <tr>
        <td>undefined</td> <td>nil or NSNull</td>
    </tr>
    <tr>
        <td>null</td> <td>nil or NSNull</td>
    </tr>
    <tr>
        <td>number</td> <td>primitive number or NSNumber</td>
    </tr>
    <tr>
        <td>string</td> <td>NSString</td>
    </tr>
    <tr>
        <td>array</td> <td>NSArray</td>
    </tr>
    <tr>
        <td>object except array</td> <td>NSDictionary</td>
    </tr>
</table>


<p>For any method to export, it must be explicitly declared in the implementation of <code>bindSelectors:</code> in your Objective-C class. For example, the snippet below exports <code>[DatastoreBinding saveString:]</code> to JavaScript environment as <code>int saveString(string)</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;OABindingProtocol&quot;</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">DatastoreBinding</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">OABindingProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">DatastoreBinding</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nl">saveString:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">content</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">_myDatastore</span> <span class="nl">save:</span><span class="n">content</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma OABindingProtocol</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">bindSelectors:</span><span class="p">(</span><span class="n">OABindingMap</span><span class="o">*</span><span class="p">)</span><span class="n">bindingMap</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">bindingMap</span> <span class="nl">bindSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">saveString:</span><span class="p">)</span> <span class="nl">forName:</span><span class="s">@&quot;saveString&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The binding object need be injected into JavaScript via <code>setScriptBinding:name:iOSOnly:</code> method of <a href="https://github.com/openaphid/Runtime/blob/master/PreBuild/OAGLViewController.h">OAGLViewController</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">viewController</span><span class="p">.</span><span class="n">glViewController</span> <span class="nl">setScriptBinding:</span><span class="p">[[[</span><span class="n">DatastoreBinding</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">]</span>
</span><span class='line'>                                                    <span class="nl">name:</span><span class="s">@&quot;datastore&quot;</span>
</span><span class='line'>                                                 <span class="nl">iOSOnly:</span><span class="n">YES</span>
</span><span class='line'>   <span class="p">];</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OpenAphid-Engine injects an instance of <code>DatastoreBinding</code> as a JavaScript object of <code>[object DynamicBinding]</code> into JavaScript environment. And its name is <code>datastore</code>. The <code>iOSOnly</code> argument manages the namespace which contains the injected object. If it&#8217;s <code>YES</code>, then the injected object can be accessed via <code>aphid.extios.datastore</code>; otherwise it can be accessed via <code>aphid.ext.datastore</code>.</p>

<blockquote><p>Notes: the <code>iOSOnly</code> argument is actually designed for future compliance when OpenAphid-Engine supports both iOS and Android.</p></blockquote>

<h2>Integration with Google Analytics in Boilerplate-iOS</h2>

<p>Let&#8217;s see a more concrete example about integrating Google Analytics in <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a>.</p>

<p>After adding Google Analytics iOS SDK into the Xcode project by following its <a href="https://developers.google.com/analytics/devguides/collection/ios/devguide#gettingStarted">official instructions</a>. We create an Objective-C object to describe the binding in <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAGoogleAnalyticsBinding.h">OAGoogleAnalyticsBinding.h</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">OAGoogleAnalyticsBinding</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">OABindingProtocol</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we add implementations of several methods in <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAGoogleAnalyticsBinding.m">OAGoogleAnalyticsBinding.m</a> that we want to invoke in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@implementation</span> <span class="nc">OAGoogleAnalyticsBinding</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">startTrackerWithAccountID:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">accountID</span> <span class="nf">despatchPeriod:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">period</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">GANTracker</span> <span class="n">sharedTracker</span><span class="p">]</span> <span class="nl">startTrackerWithAccountID:</span><span class="n">accountID</span> <span class="nl">dispatchPeriod:</span><span class="n">period</span> <span class="nl">delegate:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">trackPageview:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">pageURL</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="n">GANTracker</span> <span class="n">sharedTracker</span><span class="p">]</span> <span class="nl">trackPageview:</span><span class="n">pageURL</span> <span class="nl">withError:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The binding of the methods should be declared in the <code>bindSelectors:</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bindSelectors:</span><span class="p">(</span><span class="n">OABindingMap</span> <span class="o">*</span><span class="p">)</span><span class="nv">bindingMap</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="n">bindingMap</span> <span class="nl">bindSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">startTrackerWithAccountID:despatchPeriod:</span><span class="p">)</span>
</span><span class='line'>                 <span class="nl">forName:</span><span class="s">@&quot;startTracker&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">bindingMap</span> <span class="nl">bindSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">trackPageview:</span><span class="p">)</span>
</span><span class='line'>                 <span class="nl">forName:</span><span class="s">@&quot;trackPageView&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can inject it into JavaScript as following code inside <a href="https://github.com/openaphid/Boilerplate-iOS/blob/master/Boilerplate/Boilerplate/OAAppDelegate.m">OAAppDelegate.m</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">viewController</span><span class="p">.</span><span class="n">glViewController</span> <span class="nl">setScriptBinding:</span><span class="p">[[</span><span class="n">OAGoogleAnalyticsBinding</span> <span class="n">new</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">]</span>
</span><span class='line'>                                                    <span class="nl">name:</span><span class="s">@&quot;gat&quot;</span>
</span><span class='line'>                                                 <span class="nl">iOSOnly:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong> Updates at 07-09-2012: </strong> <code>iOSOnly</code> has been changed from <code>YES</code> to <code>NO</code> to match its Android version.</p></blockquote>

<p>Now we can use Google Analytics in JavaScript to track the user&#8217;s behavior in games:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gat</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">ext</span><span class="p">.</span><span class="nx">gat</span><span class="p">;</span> <span class="c1">//Google Analytics is injected as aphid.ext.gat</span>
</span><span class='line'><span class="nx">gat</span><span class="p">.</span><span class="nx">startTracker</span><span class="p">(</span><span class="s2">&quot;UA-31741840-1&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">//start a tracker</span>
</span><span class='line'><span class="nx">gat</span><span class="p">.</span><span class="nx">trackPageView</span><span class="p">(</span><span class="s2">&quot;main.js&quot;</span><span class="p">);</span> <span class="c1">//track a page view</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong> Updates at 07-09-2012: </strong> Since <code>iOSOnly</code> has been set to <code>NO</code>, the JavaScript namespace for <code>gat</code> is switched to <code>aphid.ext</code> from <code>aphid.extios</code></p></blockquote>

<p>We&#8217;re going to integrate more services into <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a>, and make it be a better starter kit for game development with OpenAphid-Engine.</p>

<p>If you have better ideas, please feel free to contact us via <code>openaphid@gmail.com</code> or raise an issue in our <a href="https://github.com/openaphid">github repositories</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine v0.2 is Available]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/15/openaphid-0-dot-2-available/"/>
    <updated>2012-05-15T22:28:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/15/openaphid-0-dot-2-available</id>
    <content type="html"><![CDATA[<p>AphidMobile is pleased to announce the availability of OpenAphid-Engine v0.2.</p>

<p>Highlights of the v0.2 release include:</p>

<!-- more -->


<ul>
<li>New binding system for exposing Objective-C methods to JavaScript</li>
<li>Hide <code>constructor</code> when enumerating attributes of an OpenAphid-Engine JavaScript object</li>
<li>Fix incorrect value of <code>node.onframeupdate</code> when it&#8217;s not set; should be <code>null</code> instead of an invalid empty value</li>
<li>Add a new target of <code>ObjCBindingTest</code> in <a href="https://github.com/openaphid/Demos">Demos</a></li>
<li>Support Google Analytics iOS SDK in <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a></li>
</ul>


<p>A new tutorial is coming in this week to introduce the new binding system for exposing Objective-C functions into JavaScript. Please stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Handling Touch Events in OpenAphid-Engine v0.1.1]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/06/tutorial-handling-touch-events-in-openaphid-v0-dot-1-1/"/>
    <updated>2012-05-06T21:54:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/06/tutorial-handling-touch-events-in-openaphid-v0-dot-1-1</id>
    <content type="html"><![CDATA[<p>We are glad to release OpenAphid-Engine v0.1.1, which adds multitouch support and fixes several issues about touch handling. The detailed change log is following:</p>

<!-- more -->


<ul>
<li>Supports multitouch events: adds <code>multipleTouchEnabled</code> attribute to <code>Director</code></li>
<li>Adds <code>userInteractionEnabled</code> attribute to Node</li>
<li>Fixes incorrect values of <code>event.touches</code> and <code>event.targetTouches</code> in <code>ontouchend</code> callback</li>
<li>Adds a new constructor function to Color: <code>new Color(color, [alpha])</code></li>
</ul>


<h2>Basics of Touch Event Handling</h2>

<p>Any instances of the <code>Node</code> class can be the <code>EventTarget</code> of touch events in OpenAphid-Engine. This is different from <a href="http://www.cocos2d-iphone.org/">cocos2d-iphone</a>, in which <code>CCLayer</code> is usually the target of touch event.</p>

<p>Several attributes affect how a node handles touch events: <code>multipleTouchEnabled</code> of the <code>Director</code> class; <code>userInteractionEnabled</code>, <code>visible</code>, <code>touchEnabled</code>, and <code>contentSize</code> of the <code>Node</code> class.</p>

<h2>Flow of Touch Event</h2>

<p>The flow of a touch event goes through 2 phases: hit-testing and event bubbling.</p>

<h3>Hit-Testing</h3>

<p>When a touch happens on the device screen, OpenAphid-Engine follows the routine below to locate its event target:</p>

<ol>
<li><p>Hit-testing is used to find the sub-node of the running scene that is under a touch. This method proceeds recursively on each node in the node hierarchy.</p></li>
<li><p>Hit-testing fails on a node and doesn&#8217;t proceed on its children if either <code>userInteractionEnabled</code> or <code>visible</code> is <code>false</code>.</p></li>
<li><p>The testing fails on a node but proceeds on its children if its <code>touchEnabled</code> is <code>false</code></p></li>
<li><p>If the <code>contentSize</code> if a node is zero, hit-testing is delegated to its children nodes; otherwise it proceeds when the touch took place inside the rectangle area defined by the <code>contentSize</code>.</p></li>
<li><p>A node becomes the event target when it meets the following conditions: its <code>contentSize</code> is not zero and the touch location is inside it; hit-testing fails on any of its children but succeeds on it.</p></li>
</ol>


<h3>Event Bubbling</h3>

<p>Once the event target of a touch is found by hit-testing, a touch event object is passed to its callback functions, and bubbling up to its ancestors of which <code>touchEnabled</code> is <code>true</code>. <code>event.stopPropagation</code> can be used to stop bubbling.</p>

<h2>Interfaces of Touch Event</h2>

<p>The APIs of touch event handling in OpenAphid-Engine are implemented to follow the specification of <a href="http://www.w3.org/TR/touch-events/">W3C DOM Touch Event Version 1</a>. There are already lots of guides about handling touches in DOM, which can be used as references for OpenAphid-Engine too. We&#8217;ve updated the <a href="https://github.com/openaphid/Demos">Demos</a> of OpenAphid-Engine to include a <code>TouchTest</code> application, which demonstrates three scenarios of touch handling:</p>

<ul>
<li><p>Handling a single touch event to drag a sprite.</p></li>
<li><p>Handling multitouch events to move multiple sprites.</p></li>
<li><p>Detecting pinch gesture to zoom in/out a sprite.</p></li>
</ul>


<p>Please checkout the <a href="https://github.com/openaphid/Demos">Demos</a> project for more details. We&#8217;re also going to implement gesture detection APIs in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Developer Mode of OpenAphid-Engine]]></title>
    <link href="http://openaphid.github.com/blog/2012/05/02/develop-mode-of-openaphid/"/>
    <updated>2012-05-02T14:52:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/05/02/develop-mode-of-openaphid</id>
    <content type="html"><![CDATA[<p><code>Developer Mode</code> is a feature to speed up developing games with OpenAphid-Engine. The behavior of OpenAphid-Engine changes if the developer mode is turned on.</p>

<!-- more -->


<h2>How to Enable Developer Mode?</h2>

<p>Open your project with Xcode and locate the following lines in <code>OAAppDelegate.m</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">viewController</span><span class="p">.</span><span class="n">glViewController</span> <span class="nl">configBundleName:</span><span class="s">@&quot;game.bundle&quot;</span>
</span><span class='line'>                                               <span class="nl">baseURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://129.158.217.36:18080&quot;</span><span class="p">]</span>
</span><span class='line'>                                           <span class="nl">developMode:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Setting the value of the <code>developMode</code> parameter to <code>YES</code> enables the developer mode of OpenAphid-Engine;</p></li>
<li><p>An HTTP server should be used to host the content inside the bundle folder specified by <code>configBundleName</code>. The value for the <code>baseURL</code> parameter should be set to the server address too. A ruby based tiny HTTP server is included in our boilerplate project, please refer to the <code>web_server.rb</code> and <code>start_dev_server.sh</code> files for more details;</p></li>
<li><p>The application should be built and re-deployed to devices with the new settings.</p></li>
</ol>


<p>And for the <a href="https://github.com/openaphid/Boilerplate-iOS">Boilerplate-iOS</a> project, <code>UIApplicationExitsOnSuspend</code> is <code>YES</code> in its info.plist file; which makes the app terminate automatically when the Home button is pressed.</p>

<h2>Changes in Developer Mode</h2>

<p>The main benefit of using developer mode is that it makes the game development speedy like developing for web:</p>

<ul>
<li><p>JavaScript files are fetched from the HTTP server. If you want to see the result of your changes in the game script, you only need to re-open the app;</p></li>
<li><p>Graphics resources are fetched remotely too. For example, a texture can be created by using <code>new aphid.g2d.Texture2D("player.png")</code>; the <code>player.png</code> file is fetched via <code>http://129.158.217.36:18080/player.png</code> in developer mode. OpenAphid-Engine Runtime also prints a log about it as following:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">INFO</span> <span class="mo">05</span><span class="o">/</span><span class="mo">02</span><span class="o">/</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="o">:</span><span class="mi">41</span><span class="o">:</span><span class="mi">32</span><span class="o">:</span> <span class="p">(</span><span class="n">developer</span> <span class="n">mode</span><span class="p">)</span> <span class="n">loading</span> <span class="n">data</span> <span class="err">&#39;</span><span class="n">player</span><span class="p">.</span><span class="n">png</span><span class="err">&#39;</span> <span class="n">from</span> <span class="nl">remote:</span> <span class="nl">http:</span><span class="c1">//129.158.217.36:18080/player.png</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Internal warning and error messages are displayed as on-screen notifications besides logging in device console. Warning messages are in blue background color and errors are in red color. The screenshot below shows a notification about a syntax error at line 17 in main.js:</li>
</ul>


<p><img src="http://openaphid.github.com/images/developer-mode-error-notification.png" title="Notification" alt="Error Notification" /></p>

<ul>
<li><p>Messages produced by <code>console.warn</code> and <code>console.error</code> are also displayed as notifications;</p></li>
<li><p>Write access to read-only attributes of OpenAphid-Engine objects throws exception in developer mode.</p></li>
</ul>


<p>With the developer mode of OpenAphid-Engine, the typical development process is as follows:</p>

<ol>
<li><p>Developer edits the JavaScript file with game logics and updates graphic files inside the bundle folder;</p></li>
<li><p>Presses the home button and enters the app again to see the result of the changes;</p></li>
<li><p>Following the on-screen notifications and console logs to diagnose mistakes in JavaScript files.</p></li>
</ol>


<p>Hope you like the developer mode of OpenAphid-Engine. We&#8217;ll improve it constantly to make game development easier. Please feel free to contact us if you have any suggestions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenAphid-Engine v0.1 Released]]></title>
    <link href="http://openaphid.github.com/blog/2012/04/29/openaphid-v0-dot-1-released/"/>
    <updated>2012-04-29T20:11:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/04/29/openaphid-v0-dot-1-released</id>
    <content type="html"><![CDATA[<p>We&#8217;re excited to release OpenAphid-Engine v0.1, which is the first public version of the project.</p>

<p>Three GitHub repositories have been created:</p>

<!-- more -->


<ul>
<li><p><code>Runtime</code>: <a href="https://github.com/openaphid/Runtime">https://github.com/openaphid/Runtime</a>. As the core runtime of OpenAphid-Engine, it&#8217;s an iOS static library project and is mainly written in C++. Besides porting the OpenGL ES rendering from <a href="http://www.cocos2d-iphone.org/">Cocos2d-iPhone</a>, it also manages the binding layer which exposes the 2D rendering as <a href="http://openaphid.github.com/api-doc/latest/index.html">JavaScript APIs</a>.</p></li>
<li><p><code>Demos</code>: <a href="https://github.com/openaphid/Demos">https://github.com/openaphid/Demos</a>. This repository includes several demos of OpenAphid-Engine. <code>PortedDemos</code> contains four iOS applications which are ported from <a href="http://www.cocos2d-iphone.org/">Cocos2d-iPhone</a>: NodeTest, SpriteTest, EffectTest and AdvEffectTest. They demonstrate how to manipulate nodes, sprites and actions in JavaScript APIs. <code>TankBenchmarks</code> is the benchmark described in our <a href="http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a>. The implementation by using <a href="https://developer.mobage.com/">ngCore</a> is also presented for your reference. You can build and run them on your iOS devices to reproduce the benchmark results.</p></li>
<li><p><code>Boilerplate-iOS</code>: <a href="https://github.com/openaphid/Boilerplate-iOS">https://github.com/openaphid/Boilerplate-iOS</a>. It&#8217;s a template project for developing iOS games with OpenAphid-Engine. It&#8217;s a good start point if you want to play with the APIs of OpenAphid-Engine by yourself.</p></li>
</ul>


<p>The <a href="http://openaphid.github.com/api-doc/latest/index.html">JavaScript API references</a> of OpenAphid-Engine v0.1 is also available. It&#8217;s a bit rough right now. We promise that it&#8217;ll be improved in the future.</p>

<h2>Highlights of OpenAphid-Engine v0.1</h2>

<p>v0.1 is the start of OpenAphid-Engine. We admit that it&#8217;s not ready for real product yet, but we&#8217;d like to present some characteristics of the project here.</p>

<ul>
<li><p>OpenAphid-Engine APIs can be considered as the &#8220;DOM&#8221; APIs for 2D games on mobile devices. The internal binding layer is implemented in the similar approach as <a href="http://www.webkit.org/">WebKit</a> does for binding native objects to the JavaScript engine;</p></li>
<li><p>The memory occupied by native objects is managed automatically. Compared to some other script based game engines, OpenAphid-Engine doesn&#8217;t have destroy API at script level for any native objects. Native objects that are created in JavaScript are managed by the JavaScript garbage collector as other pure JavaScript objects.</p></li>
<li><p>OpenAphid-Engine follows the standard specifications to implement some core features. Although the rendering system of OpenAphid-Engine is ported from Cocos2d-iPhone, which is not supported in browsers; the other APIs in OpenAphid-Engine are designed to follow W3C standards. For example, the <code>console</code> object in global scope is provided as it is in browsers; the <code>XMLHttpRequest</code> APIs are partially implemented in v0.1, and will be fully compatible to its W3C specification in a future release. And the touch event handling in OpenAphid-Engine is implemented as the same as in DOM, which is totally different from Cocos2d-iPhone.</p></li>
<li><p>OpenAphid-Engine is fast and efficient. The benchmark result in the <a href="http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/">previous post</a> has been updated by using v0.1, which is slightly faster. We also evaluated the memory usage of OpenAphid-Engine with the same benchmark (lower is better):</p></li>
</ul>


<p><img src="http://openaphid.github.com/images/tank_benchmark_mem_v0.1.jpg" title="Real memory" alt="Real memory usage of OpenAphid-Engine and ngcore" /></p>

<blockquote><p>The data are captured by using the Activity Monitor of Xcode Instruments. The memory usage of the benchmark on ngcore v1.6 is presented for reference only.</p></blockquote>

<h2>What&#8217;s Next for OpenAphid-Engine</h2>

<p>We&#8217;re working hard to improve OpenAphid-Engine. Most efforts are spent on the following tasks:</p>

<ul>
<li><p>Ports more features from Cocos2d-iPhone, like physics support, audio support, etc;</p></li>
<li><p>Supports Android OS;</p></li>
<li><p>Provides binding APIs for integrating 3rd-party services. The binding system in OpenAphid-Engine Runtime is designed for the performance requirement of OpenGL ES rendering, but it&#8217;s not suitable for general purpose. Another binding system is planned to bridge JavaScript codes and Objective-C(or Java on Android in the future releases) easily. The <code>Boilerplate-iOS</code> project will also be improved by integrating 3rd-party services, like analytics, in-app purchase, advertisement;</p></li>
<li><p>Implements more W3C standard APIs, includes making XMLHttpRequest fully compatible to specifications, adding FileSystem and WebSocket supports, etc.</p></li>
</ul>


<p>Please feel free to contact us with your questions and suggestions via <code>openaphid At gmail.com</code>. We’d appreciate it for your kind help.</p>

<h2>Special Thanks</h2>

<p>We&#8217;d like to express our appreciation to <a href="http://wannadobre.carbonmade.com/">Oana Dobre</a>, who designed the cute aphid graphics and allowed us to use them for free.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript and Cocos2D-iPhone: a sneak peek of OpenAphid-Engine]]></title>
    <link href="http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek/"/>
    <updated>2012-02-20T23:26:00+08:00</updated>
    <id>http://openaphid.github.com/blog/2012/02/20/javascript-and-cocos2d-a-sneak-peek</id>
    <content type="html"><![CDATA[<h2>What is OpenAphid-Engine?</h2>

<p><em>OpenAphid-Engine</em> is our secret OSS project to combine the power of JavaScript and <a href="http://www.cocos2d-iphone.org/">Cocos2d-iPhone</a> for native game development on mobile devices. It allows developers to write fast and native quality games in JavaScript language. The architecture of OpenAphid-Engine can be summarized as below:</p>

<!-- more -->


<p><img src="http://openaphid.github.com/images/architecture.jpg" title="Architecture of OpenAphid-Engine" alt="architecture" /></p>

<p>A set of Cocos2D-style JavaScript APIs are provided for composing scenes, applying actions on nodes, handling events, etc. The core runtime of OpenAphid-Engine is wrote in C++, which adopts the architecture of Cocos2d-iPhone. The JavaScript binding module bridges the C++ runtime and the JavaScript engine, which allows games to use native features in pure JavaScript.</p>

<p>We decided to implement the core of OpenAphid-Engine in C++ instead of reusing the Objective-C code base from Cocos2d-iPhone. The first reason is for portability. The current WIP version is for iOS only as Cocos2d-iPhone, but we&#8217;d like to support Android and other platforms after the iOS version is stable. The other consideration is for faster JavaScript binding. We want to reduce the performance overhead introduced by the script layer as small as possible.</p>

<h2>Why use JavaScript?</h2>

<p>JavaScript is one of the most popular programming languages in the world. OpenAphid-Engine enables developers using a familiar language for mobile game development, and it can also make the development cycle in a web speed.</p>

<p>At the development stage, developers can save the script and reload it on devices to see the changes instantly. No need to compile and re-deploy anymore.</p>

<p>OpenAphid-Engine is not the first one to bring JavaScript into native game development. There are several other frameworks which take the similar approaches. The most famous one is <a href="https://developer.mobage.com/">ngCore</a> from <a href="http://dena.jp/intl/">DeNA Co., Ltd</a>.</p>

<h2>Performance Benchmark Setup</h2>

<p>We adopt a benchmark program introduced in <a href="http://www.slideshare.net/devsumi/17a6smartphone-xplatform">a presentation of ngCore SDK</a>. The program is modified a bit and implemented in Cocos2d-iPhone, ngCore and OpenAphid-Engine. The benchmark is composed by several parts, let&#8217;s describe them using APIs from OpenAphid-Engine:</p>

<blockquote><p><strong> Updates at 2012-04-28: </strong> code snippets were updated according to the API changes in v0.1 release.</p></blockquote>

<h5>A background image(Size 1024x1024)</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">background</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Texture2D</span><span class="p">(</span><span class="s2">&quot;background.png&quot;</span><span class="p">));</span>
</span><span class='line'><span class="nx">scene</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">background</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>A frame-by-frame animation(5 frames)</h4>

<p>The animation is made from a 320x64 size image, which is originally included in a sample project of ngCore SDK:</p>

<p><img src="http://openaphid.github.com/images/tank.png" title="Tank" alt="tank animation" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">texture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Texture2D</span><span class="p">(</span><span class="s2">&quot;tank.png&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">frames</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">imgSize</span> <span class="o">=</span> <span class="nx">texture</span><span class="p">.</span><span class="nx">contentSize</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">SpriteFrame</span><span class="p">(</span>
</span><span class='line'>                                      <span class="nx">texture</span><span class="p">,</span>
</span><span class='line'>                                      <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">Rect</span><span class="p">(</span>
</span><span class='line'>                                                          <span class="nx">imgSize</span><span class="p">.</span><span class="nx">width</span> <span class="o">*</span> <span class="nx">i</span> <span class="o">/</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="nx">imgSize</span><span class="p">.</span><span class="nx">width</span> <span class="o">/</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>                                                          <span class="nx">imgSize</span><span class="p">.</span><span class="nx">height</span>
</span><span class='line'>                                                          <span class="p">)</span>
</span><span class='line'>                                      <span class="p">);</span>
</span><span class='line'>  <span class="nx">frames</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">frame</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Tank moves per frame inside the screen</h4>

<p>Dozens of small tanks are added to the scene. Each of them has a random initial position and changes it during each frame.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">tank</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">//declare a namespace</span>
</span><span class='line'><span class="nx">tank</span><span class="p">.</span><span class="nx">maxTankCount</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tank</span><span class="p">.</span><span class="nx">Tank</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">texture</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//fields</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="nx">texture</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//the movement velocity and direction</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">vx_</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="o">?</span> <span class="mf">0.1</span> <span class="o">:</span> <span class="o">-</span><span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">vy_</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span> <span class="o">?</span> <span class="mf">0.1</span> <span class="o">:</span> <span class="o">-</span><span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">winSize</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">director</span><span class="p">.</span><span class="nx">winSize</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//a random initial position</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">Point</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">winSize</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">winSize</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//setup and register frame update listener</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">onframeupdate</span> <span class="o">=</span> <span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleFrameUpdate</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">scheduleUpdate</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tank</span><span class="p">.</span><span class="nx">Tank</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSprite</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">;};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">tank</span><span class="p">.</span><span class="nx">Tank</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">handleFrameUpdate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">interval</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="nx">interval</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">vx_</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">interval</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">vy_</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">size</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">director</span><span class="p">.</span><span class="nx">winSize</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">vx_</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vx_</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="nx">size</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">size</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">vx_</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vx_</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">vy_</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vy_</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">&gt;</span> <span class="nx">size</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">size</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">vy_</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">vy_</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">sprite_</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="nx">p</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Apply animation and add tanks to the scene</h4>

<p>After applying the animation, the size of tank sprite is 64x64.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">animation</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">Animation</span><span class="p">(</span><span class="nx">frames</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">repeatForever</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">animate</span><span class="p">(</span><span class="nx">animation</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tank</span><span class="p">.</span><span class="nx">maxTankCount</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newTank</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">tank</span><span class="p">.</span><span class="nx">Tank</span><span class="p">(</span><span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">texture</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">newTank</span><span class="p">.</span><span class="nx">getSprite</span><span class="p">().</span><span class="nx">runAction</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">copy</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">scene</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">newTank</span><span class="p">.</span><span class="nx">getSprite</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Run the scene</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">director</span> <span class="o">=</span> <span class="nx">aphid</span><span class="p">.</span><span class="nx">g2d</span><span class="p">.</span><span class="nx">director</span><span class="p">;</span>
</span><span class='line'><span class="nx">director</span><span class="p">.</span><span class="nx">runScene</span><span class="p">(</span><span class="nx">scene</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>A screenshot of the benchmark running with 100 tanks:</p>

<p><img src="http://openaphid.github.com/images/screenshot_openaphid_100tanks.png" title="Screenshot" alt="screenshot of 100 tanks in OpenAphid-Engine" /></p>

<h2>Benchmark Environment</h2>

<p>The same benchmark is implemented in Cocos2d-iPhone, ngCore and OpenAphid-Engine. We tried to run it using the latest stable version of each:</p>

<ul>
<li><a href="http://www.cocos2d-iphone.org/download">Cocos2d-iPhone 1.0.1</a>. CCSpriteBatchNode is not used to make sure the benchmark share the same behavior in each framework. CC_DIRECTOR_FAST_FPS is also turned off for the same reason. CC_DIRECTOR_FPS_INTERVAL is set to 1.0f.</li>
<li><a href="https://developer.mobage.com/">ngCore 1.6-20120209</a>. The performance of ngCore has improved a lot in this latest release than v0.9 which is used in the <a href="http://www.slideshare.net/devsumi/17a6smartphone-xplatform">presentation</a>.</li>
<li>OpenAphid-Engine. An internal stable release is used to run the test.</li>
</ul>


<p>The benchmark is performed on an iPod Touch 3rd generation (32GB). The hardware specification can be found from its <a href="http://en.wikipedia.org/wiki/IPod_Touch">wikipedia page</a>.</p>

<h3 id="benchmark">Benchmark Results</h3>


<p>The FPS data are recorded for running different number of tanks on each framework. The FPS of ngCore is not consistent, so we tracked both the high and low FPS data.</p>

<blockquote><p><strong> Updates at 2012-04-28: </strong> benchmark results are updated by using OpenAphid-Engine v0.1 release.</p></blockquote>

<p><img src="http://openaphid.github.com/images/tank_benchmark_fps_v0.1.jpg" title="Benchmark Results (Updated at 2012-04-28)" alt="performance benchmark" /></p>

<p>OpenAphid-Engine gives a pleasant result. It&#8217;s faster than ngCore and keeps 60 FPS when there are less than 200 tank sprites. The FPS is lower than Cocos2d-iPhone&#8217;s when adding more tanks, it&#8217;s acceptable as there are hundreds of native-to-JavaScript update callbacks to invoke during each frame. And we&#8217;ll keep working to improve its performance.</p>

<h2>When will OpenAphid-Engine be released?</h2>

<p>OpenAphid-Engine is still under development. We&#8217;re working hard to make the first public release available in the middle of April. All source codes will be public then. Please feel free to mail us with your questions and suggestions via <em>openaphid At gmail.com</em>. We&#8217;d appreciate it for your kind help.</p>
]]></content>
  </entry>
  
</feed>
